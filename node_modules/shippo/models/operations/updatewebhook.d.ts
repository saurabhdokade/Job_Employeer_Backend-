import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type UpdateWebhookRequest = {
    /**
     * Object ID of the webhook to retrieve
     */
    webhookId: string;
    webhookUpdateRequest: components.WebhookUpdateRequest;
};
/** @internal */
export declare const UpdateWebhookRequest$inboundSchema: z.ZodType<UpdateWebhookRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type UpdateWebhookRequest$Outbound = {
    webhookId: string;
    WebhookUpdateRequest: components.WebhookUpdateRequest$Outbound;
};
/** @internal */
export declare const UpdateWebhookRequest$outboundSchema: z.ZodType<UpdateWebhookRequest$Outbound, z.ZodTypeDef, UpdateWebhookRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UpdateWebhookRequest$ {
    /** @deprecated use `UpdateWebhookRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UpdateWebhookRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `UpdateWebhookRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UpdateWebhookRequest$Outbound, z.ZodTypeDef, UpdateWebhookRequest>;
    /** @deprecated use `UpdateWebhookRequest$Outbound` instead. */
    type Outbound = UpdateWebhookRequest$Outbound;
}
export declare function updateWebhookRequestToJSON(updateWebhookRequest: UpdateWebhookRequest): string;
export declare function updateWebhookRequestFromJSON(jsonString: string): SafeParseResult<UpdateWebhookRequest, SDKValidationError>;
//# sourceMappingURL=updatewebhook.d.ts.map