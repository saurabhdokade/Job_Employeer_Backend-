"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getParcelRequestFromJSON = exports.getParcelRequestToJSON = exports.GetParcelRequest$ = exports.GetParcelRequest$outboundSchema = exports.GetParcelRequest$inboundSchema = exports.getParcelGlobalsFromJSON = exports.getParcelGlobalsToJSON = exports.GetParcelGlobals$ = exports.GetParcelGlobals$outboundSchema = exports.GetParcelGlobals$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.GetParcelGlobals$inboundSchema = z.object({
    "SHIPPO-API-VERSION": z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "SHIPPO-API-VERSION": "shippoApiVersion",
    });
});
/** @internal */
exports.GetParcelGlobals$outboundSchema = z.object({
    shippoApiVersion: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        shippoApiVersion: "SHIPPO-API-VERSION",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetParcelGlobals$;
(function (GetParcelGlobals$) {
    /** @deprecated use `GetParcelGlobals$inboundSchema` instead. */
    GetParcelGlobals$.inboundSchema = exports.GetParcelGlobals$inboundSchema;
    /** @deprecated use `GetParcelGlobals$outboundSchema` instead. */
    GetParcelGlobals$.outboundSchema = exports.GetParcelGlobals$outboundSchema;
})(GetParcelGlobals$ || (exports.GetParcelGlobals$ = GetParcelGlobals$ = {}));
function getParcelGlobalsToJSON(getParcelGlobals) {
    return JSON.stringify(exports.GetParcelGlobals$outboundSchema.parse(getParcelGlobals));
}
exports.getParcelGlobalsToJSON = getParcelGlobalsToJSON;
function getParcelGlobalsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetParcelGlobals$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetParcelGlobals' from JSON`);
}
exports.getParcelGlobalsFromJSON = getParcelGlobalsFromJSON;
/** @internal */
exports.GetParcelRequest$inboundSchema = z.object({
    ParcelId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "ParcelId": "parcelId",
    });
});
/** @internal */
exports.GetParcelRequest$outboundSchema = z.object({
    parcelId: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        parcelId: "ParcelId",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var GetParcelRequest$;
(function (GetParcelRequest$) {
    /** @deprecated use `GetParcelRequest$inboundSchema` instead. */
    GetParcelRequest$.inboundSchema = exports.GetParcelRequest$inboundSchema;
    /** @deprecated use `GetParcelRequest$outboundSchema` instead. */
    GetParcelRequest$.outboundSchema = exports.GetParcelRequest$outboundSchema;
})(GetParcelRequest$ || (exports.GetParcelRequest$ = GetParcelRequest$ = {}));
function getParcelRequestToJSON(getParcelRequest) {
    return JSON.stringify(exports.GetParcelRequest$outboundSchema.parse(getParcelRequest));
}
exports.getParcelRequestToJSON = getParcelRequestToJSON;
function getParcelRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.GetParcelRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'GetParcelRequest' from JSON`);
}
exports.getParcelRequestFromJSON = getParcelRequestFromJSON;
//# sourceMappingURL=getparcel.js.map