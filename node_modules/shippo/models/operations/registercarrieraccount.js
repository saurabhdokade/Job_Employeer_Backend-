"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCarrierAccountRequestBodyFromJSON = exports.registerCarrierAccountRequestBodyToJSON = exports.RegisterCarrierAccountRequestBody$ = exports.RegisterCarrierAccountRequestBody$outboundSchema = exports.RegisterCarrierAccountRequestBody$inboundSchema = exports.registerCarrierAccountGlobalsFromJSON = exports.registerCarrierAccountGlobalsToJSON = exports.RegisterCarrierAccountGlobals$ = exports.RegisterCarrierAccountGlobals$outboundSchema = exports.RegisterCarrierAccountGlobals$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const components = __importStar(require("../components/index.js"));
/** @internal */
exports.RegisterCarrierAccountGlobals$inboundSchema = z.object({
    "SHIPPO-API-VERSION": z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "SHIPPO-API-VERSION": "shippoApiVersion",
    });
});
/** @internal */
exports.RegisterCarrierAccountGlobals$outboundSchema = z.object({
    shippoApiVersion: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        shippoApiVersion: "SHIPPO-API-VERSION",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RegisterCarrierAccountGlobals$;
(function (RegisterCarrierAccountGlobals$) {
    /** @deprecated use `RegisterCarrierAccountGlobals$inboundSchema` instead. */
    RegisterCarrierAccountGlobals$.inboundSchema = exports.RegisterCarrierAccountGlobals$inboundSchema;
    /** @deprecated use `RegisterCarrierAccountGlobals$outboundSchema` instead. */
    RegisterCarrierAccountGlobals$.outboundSchema = exports.RegisterCarrierAccountGlobals$outboundSchema;
})(RegisterCarrierAccountGlobals$ || (exports.RegisterCarrierAccountGlobals$ = RegisterCarrierAccountGlobals$ = {}));
function registerCarrierAccountGlobalsToJSON(registerCarrierAccountGlobals) {
    return JSON.stringify(exports.RegisterCarrierAccountGlobals$outboundSchema.parse(registerCarrierAccountGlobals));
}
exports.registerCarrierAccountGlobalsToJSON = registerCarrierAccountGlobalsToJSON;
function registerCarrierAccountGlobalsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RegisterCarrierAccountGlobals$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RegisterCarrierAccountGlobals' from JSON`);
}
exports.registerCarrierAccountGlobalsFromJSON = registerCarrierAccountGlobalsFromJSON;
/** @internal */
exports.RegisterCarrierAccountRequestBody$inboundSchema = z.union([
    components.CarrierAccountCanadaPostCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("canada_post") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountChronopostCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("chronopost") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountColissimoCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("colissimo") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountCorreosCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("correos") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountDeutschePostCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("deutsche_post") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountDHLExpressCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("dhl_express") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountDpdDeCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("dpd_de") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountDPDUKCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("dpd_uk") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountFedExCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("fedex") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountHermesUKCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("hermes_uk") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountMondialRelayCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("mondial_relay") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountPosteItalianeCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("poste_italiane") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountUPSCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("ups") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountUSPSCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("usps") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountSendleCreateRequest$inboundSchema.and(z.object({ carrier: z.literal("sendle") }).transform((v) => ({
        carrier: v.carrier,
    }))),
]);
/** @internal */
exports.RegisterCarrierAccountRequestBody$outboundSchema = z.union([
    components.CarrierAccountCanadaPostCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("canada_post") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountChronopostCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("chronopost") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountColissimoCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("colissimo") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountCorreosCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("correos") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountDeutschePostCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("deutsche_post") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountDHLExpressCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("dhl_express") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountDpdDeCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("dpd_de") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountDPDUKCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("dpd_uk") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountFedExCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("fedex") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountHermesUKCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("hermes_uk") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountMondialRelayCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("mondial_relay") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountPosteItalianeCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("poste_italiane") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountUPSCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("ups") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountUSPSCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("usps") }).transform((v) => ({
        carrier: v.carrier,
    }))),
    components.CarrierAccountSendleCreateRequest$outboundSchema.and(z.object({ carrier: z.literal("sendle") }).transform((v) => ({
        carrier: v.carrier,
    }))),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var RegisterCarrierAccountRequestBody$;
(function (RegisterCarrierAccountRequestBody$) {
    /** @deprecated use `RegisterCarrierAccountRequestBody$inboundSchema` instead. */
    RegisterCarrierAccountRequestBody$.inboundSchema = exports.RegisterCarrierAccountRequestBody$inboundSchema;
    /** @deprecated use `RegisterCarrierAccountRequestBody$outboundSchema` instead. */
    RegisterCarrierAccountRequestBody$.outboundSchema = exports.RegisterCarrierAccountRequestBody$outboundSchema;
})(RegisterCarrierAccountRequestBody$ || (exports.RegisterCarrierAccountRequestBody$ = RegisterCarrierAccountRequestBody$ = {}));
function registerCarrierAccountRequestBodyToJSON(registerCarrierAccountRequestBody) {
    return JSON.stringify(exports.RegisterCarrierAccountRequestBody$outboundSchema.parse(registerCarrierAccountRequestBody));
}
exports.registerCarrierAccountRequestBodyToJSON = registerCarrierAccountRequestBodyToJSON;
function registerCarrierAccountRequestBodyFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.RegisterCarrierAccountRequestBody$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'RegisterCarrierAccountRequestBody' from JSON`);
}
exports.registerCarrierAccountRequestBodyFromJSON = registerCarrierAccountRequestBodyFromJSON;
//# sourceMappingURL=registercarrieraccount.js.map