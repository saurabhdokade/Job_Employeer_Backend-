import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetWebhookRequest = {
    /**
     * Object ID of the webhook to retrieve
     */
    webhookId: string;
};
/** @internal */
export declare const GetWebhookRequest$inboundSchema: z.ZodType<GetWebhookRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetWebhookRequest$Outbound = {
    webhookId: string;
};
/** @internal */
export declare const GetWebhookRequest$outboundSchema: z.ZodType<GetWebhookRequest$Outbound, z.ZodTypeDef, GetWebhookRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetWebhookRequest$ {
    /** @deprecated use `GetWebhookRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetWebhookRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetWebhookRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetWebhookRequest$Outbound, z.ZodTypeDef, GetWebhookRequest>;
    /** @deprecated use `GetWebhookRequest$Outbound` instead. */
    type Outbound = GetWebhookRequest$Outbound;
}
export declare function getWebhookRequestToJSON(getWebhookRequest: GetWebhookRequest): string;
export declare function getWebhookRequestFromJSON(jsonString: string): SafeParseResult<GetWebhookRequest, SDKValidationError>;
//# sourceMappingURL=getwebhook.d.ts.map