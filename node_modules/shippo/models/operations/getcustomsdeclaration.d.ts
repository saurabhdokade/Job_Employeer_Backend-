import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type GetCustomsDeclarationGlobals = {
    /**
     * Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
     */
    shippoApiVersion?: string | undefined;
};
export type GetCustomsDeclarationRequest = {
    /**
     * Object ID of the customs declaration
     */
    customsDeclarationId: string;
    /**
     * The page number you want to select
     */
    page?: number | undefined;
};
/** @internal */
export declare const GetCustomsDeclarationGlobals$inboundSchema: z.ZodType<GetCustomsDeclarationGlobals, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCustomsDeclarationGlobals$Outbound = {
    "SHIPPO-API-VERSION"?: string | undefined;
};
/** @internal */
export declare const GetCustomsDeclarationGlobals$outboundSchema: z.ZodType<GetCustomsDeclarationGlobals$Outbound, z.ZodTypeDef, GetCustomsDeclarationGlobals>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCustomsDeclarationGlobals$ {
    /** @deprecated use `GetCustomsDeclarationGlobals$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCustomsDeclarationGlobals, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCustomsDeclarationGlobals$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCustomsDeclarationGlobals$Outbound, z.ZodTypeDef, GetCustomsDeclarationGlobals>;
    /** @deprecated use `GetCustomsDeclarationGlobals$Outbound` instead. */
    type Outbound = GetCustomsDeclarationGlobals$Outbound;
}
export declare function getCustomsDeclarationGlobalsToJSON(getCustomsDeclarationGlobals: GetCustomsDeclarationGlobals): string;
export declare function getCustomsDeclarationGlobalsFromJSON(jsonString: string): SafeParseResult<GetCustomsDeclarationGlobals, SDKValidationError>;
/** @internal */
export declare const GetCustomsDeclarationRequest$inboundSchema: z.ZodType<GetCustomsDeclarationRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type GetCustomsDeclarationRequest$Outbound = {
    CustomsDeclarationId: string;
    page: number;
};
/** @internal */
export declare const GetCustomsDeclarationRequest$outboundSchema: z.ZodType<GetCustomsDeclarationRequest$Outbound, z.ZodTypeDef, GetCustomsDeclarationRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace GetCustomsDeclarationRequest$ {
    /** @deprecated use `GetCustomsDeclarationRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<GetCustomsDeclarationRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `GetCustomsDeclarationRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<GetCustomsDeclarationRequest$Outbound, z.ZodTypeDef, GetCustomsDeclarationRequest>;
    /** @deprecated use `GetCustomsDeclarationRequest$Outbound` instead. */
    type Outbound = GetCustomsDeclarationRequest$Outbound;
}
export declare function getCustomsDeclarationRequestToJSON(getCustomsDeclarationRequest: GetCustomsDeclarationRequest): string;
export declare function getCustomsDeclarationRequestFromJSON(jsonString: string): SafeParseResult<GetCustomsDeclarationRequest, SDKValidationError>;
//# sourceMappingURL=getcustomsdeclaration.d.ts.map