import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type ListShipmentsGlobals = {
    /**
     * Optional string used to pick a non-default API version to use. See our <a href="https://docs.goshippo.com/docs/api_concepts/apiversioning/">API version</a> guide.
     */
    shippoApiVersion?: string | undefined;
};
export type ListShipmentsRequest = {
    /**
     * The page token for paginated results
     */
    pageToken?: string | undefined;
    /**
     * The page number you want to select
     */
    page?: number | undefined;
    /**
     * The number of results to return per page (max 100)
     */
    results?: number | undefined;
    /**
     * Object(s) created greater than a provided date and time.
     */
    objectCreatedGt?: string | undefined;
    /**
     * Object(s) created greater than or equal to a provided date and time.
     */
    objectCreatedGte?: string | undefined;
    /**
     * Object(s) created lesser than a provided date and time.
     */
    objectCreatedLt?: string | undefined;
    /**
     * Object(s) created lesser than or equal to a provided date and time.
     */
    objectCreatedLte?: string | undefined;
};
/** @internal */
export declare const ListShipmentsGlobals$inboundSchema: z.ZodType<ListShipmentsGlobals, z.ZodTypeDef, unknown>;
/** @internal */
export type ListShipmentsGlobals$Outbound = {
    "SHIPPO-API-VERSION"?: string | undefined;
};
/** @internal */
export declare const ListShipmentsGlobals$outboundSchema: z.ZodType<ListShipmentsGlobals$Outbound, z.ZodTypeDef, ListShipmentsGlobals>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListShipmentsGlobals$ {
    /** @deprecated use `ListShipmentsGlobals$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListShipmentsGlobals, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListShipmentsGlobals$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListShipmentsGlobals$Outbound, z.ZodTypeDef, ListShipmentsGlobals>;
    /** @deprecated use `ListShipmentsGlobals$Outbound` instead. */
    type Outbound = ListShipmentsGlobals$Outbound;
}
export declare function listShipmentsGlobalsToJSON(listShipmentsGlobals: ListShipmentsGlobals): string;
export declare function listShipmentsGlobalsFromJSON(jsonString: string): SafeParseResult<ListShipmentsGlobals, SDKValidationError>;
/** @internal */
export declare const ListShipmentsRequest$inboundSchema: z.ZodType<ListShipmentsRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type ListShipmentsRequest$Outbound = {
    page_token?: string | undefined;
    page: number;
    results: number;
    object_created_gt?: string | undefined;
    object_created_gte?: string | undefined;
    object_created_lt?: string | undefined;
    object_created_lte?: string | undefined;
};
/** @internal */
export declare const ListShipmentsRequest$outboundSchema: z.ZodType<ListShipmentsRequest$Outbound, z.ZodTypeDef, ListShipmentsRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ListShipmentsRequest$ {
    /** @deprecated use `ListShipmentsRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ListShipmentsRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `ListShipmentsRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ListShipmentsRequest$Outbound, z.ZodTypeDef, ListShipmentsRequest>;
    /** @deprecated use `ListShipmentsRequest$Outbound` instead. */
    type Outbound = ListShipmentsRequest$Outbound;
}
export declare function listShipmentsRequestToJSON(listShipmentsRequest: ListShipmentsRequest): string;
export declare function listShipmentsRequestFromJSON(jsonString: string): SafeParseResult<ListShipmentsRequest, SDKValidationError>;
//# sourceMappingURL=listshipments.d.ts.map