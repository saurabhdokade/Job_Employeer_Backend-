import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type DeleteWebhookRequest = {
    /**
     * Object ID of the webhook to delete
     */
    webhookId: string;
};
/** @internal */
export declare const DeleteWebhookRequest$inboundSchema: z.ZodType<DeleteWebhookRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type DeleteWebhookRequest$Outbound = {
    webhookId: string;
};
/** @internal */
export declare const DeleteWebhookRequest$outboundSchema: z.ZodType<DeleteWebhookRequest$Outbound, z.ZodTypeDef, DeleteWebhookRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DeleteWebhookRequest$ {
    /** @deprecated use `DeleteWebhookRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DeleteWebhookRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `DeleteWebhookRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DeleteWebhookRequest$Outbound, z.ZodTypeDef, DeleteWebhookRequest>;
    /** @deprecated use `DeleteWebhookRequest$Outbound` instead. */
    type Outbound = DeleteWebhookRequest$Outbound;
}
export declare function deleteWebhookRequestToJSON(deleteWebhookRequest: DeleteWebhookRequest): string;
export declare function deleteWebhookRequestFromJSON(jsonString: string): SafeParseResult<DeleteWebhookRequest, SDKValidationError>;
//# sourceMappingURL=deletewebhook.d.ts.map