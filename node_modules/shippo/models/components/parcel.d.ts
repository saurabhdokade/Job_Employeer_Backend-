import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { DistanceUnitEnum } from "./distanceunitenum.js";
import { ParcelExtra, ParcelExtra$Outbound } from "./parcelextra.js";
import { ParcelTemplateEnumSet, ParcelTemplateEnumSet$Outbound } from "./parceltemplateenumset.js";
import { WeightUnitEnum } from "./weightunitenum.js";
/**
 * A Parcel will only be valid when all required values have been sent and validated successfully.
 */
export declare const ObjectState: {
    readonly Valid: "VALID";
};
/**
 * A Parcel will only be valid when all required values have been sent and validated successfully.
 */
export type ObjectState = ClosedEnum<typeof ObjectState>;
export type Parcel = {
    /**
     * An object holding optional extra services to be requested for each parcel in a multi-piece shipment.
     *
     * @remarks
     * See the <a href="#section/Parcel-Extras">Parcel Extra table below</a> for all available services.
     */
    extra?: ParcelExtra | undefined;
    metadata?: string | undefined;
    /**
     * The unit used for weight.
     */
    massUnit: WeightUnitEnum;
    /**
     * Weight of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    weight: string;
    /**
     * The measure unit used for length, width and height.
     */
    distanceUnit: DistanceUnitEnum;
    /**
     * Height of the parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    height: string;
    /**
     * Length of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    length: string;
    /**
     * Width of the Parcel. Up to six digits in front and four digits after the decimal separator are accepted.
     */
    width: string;
    /**
     * Date and time of Parcel creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given Parcel object. This ID is required to create a Shipment object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the Parcel object.
     */
    objectOwner?: string | undefined;
    /**
     * A Parcel will only be valid when all required values have been sent and validated successfully.
     */
    objectState?: ObjectState | undefined;
    /**
     * Date and time of last Parcel update. Since you cannot update Parcels after they were created, this time stamp reflects the time when the Parcel was changed by Shippo's systems for the last time, e.g., during sorting the dimensions given.
     */
    objectUpdated?: Date | undefined;
    /**
     * If template is passed, `length`, `width`, `height`, and `distance_unit` are not required
     */
    template?: ParcelTemplateEnumSet | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
};
/** @internal */
export declare const ObjectState$inboundSchema: z.ZodNativeEnum<typeof ObjectState>;
/** @internal */
export declare const ObjectState$outboundSchema: z.ZodNativeEnum<typeof ObjectState>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ObjectState$ {
    /** @deprecated use `ObjectState$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Valid: "VALID";
    }>;
    /** @deprecated use `ObjectState$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Valid: "VALID";
    }>;
}
/** @internal */
export declare const Parcel$inboundSchema: z.ZodType<Parcel, z.ZodTypeDef, unknown>;
/** @internal */
export type Parcel$Outbound = {
    extra?: ParcelExtra$Outbound | undefined;
    metadata?: string | undefined;
    mass_unit: string;
    weight: string;
    distance_unit: string;
    height: string;
    length: string;
    width: string;
    object_created?: string | undefined;
    object_id?: string | undefined;
    object_owner?: string | undefined;
    object_state?: string | undefined;
    object_updated?: string | undefined;
    template?: ParcelTemplateEnumSet$Outbound | undefined;
    test?: boolean | undefined;
};
/** @internal */
export declare const Parcel$outboundSchema: z.ZodType<Parcel$Outbound, z.ZodTypeDef, Parcel>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Parcel$ {
    /** @deprecated use `Parcel$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Parcel, z.ZodTypeDef, unknown>;
    /** @deprecated use `Parcel$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Parcel$Outbound, z.ZodTypeDef, Parcel>;
    /** @deprecated use `Parcel$Outbound` instead. */
    type Outbound = Parcel$Outbound;
}
export declare function parcelToJSON(parcel: Parcel): string;
export declare function parcelFromJSON(jsonString: string): SafeParseResult<Parcel, SDKValidationError>;
//# sourceMappingURL=parcel.d.ts.map