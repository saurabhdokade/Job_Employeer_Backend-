import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
import { CustomsDeclaration, CustomsDeclaration$Outbound } from "./customsdeclaration.js";
import { Parcel, Parcel$Outbound } from "./parcel.js";
import { Rate, Rate$Outbound } from "./rate.js";
import { ResponseMessage, ResponseMessage$Outbound } from "./responsemessage.js";
import { ShipmentExtra, ShipmentExtra$Outbound } from "./shipmentextra.js";
/**
 * `Waiting` shipments have been successfully submitted but not yet been processed.
 *
 * @remarks
 * `Queued` shipments are currently being processed.
 * `Success` shipments have been processed successfully, meaning that rate generation has concluded.
 * `Error` does not occur currently and is reserved for future use.
 */
export declare const ShipmentStatus: {
    readonly Error: "ERROR";
    readonly Queued: "QUEUED";
    readonly Success: "SUCCESS";
    readonly Waiting: "WAITING";
};
/**
 * `Waiting` shipments have been successfully submitted but not yet been processed.
 *
 * @remarks
 * `Queued` shipments are currently being processed.
 * `Success` shipments have been processed successfully, meaning that rate generation has concluded.
 * `Error` does not occur currently and is reserved for future use.
 */
export type ShipmentStatus = ClosedEnum<typeof ShipmentStatus>;
/**
 * Shipment represents the parcel as retrieved from the database
 */
export type Shipment = {
    /**
     * An object holding optional extra services to be requested.
     */
    extra?: ShipmentExtra | undefined;
    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    metadata: string;
    /**
     * Date the shipment will be tendered to the carrier. Must be in the format `2014-01-18T00:35:03.463Z`.
     *
     * @remarks
     * Defaults to current date and time if no value is provided. Please note that some carriers require this value to
     * be in the future, on a working day, or similar.
     */
    shipmentDate?: string | undefined;
    /**
     * <a href="#tag/Addresses">Address</a> object of the sender / seller. Will be returned expanded by default.
     */
    addressFrom: Address;
    /**
     * ID of the Address object where the shipment will be sent back to if it is not delivered
     *
     * @remarks
     * (Only available for UPS, USPS, and Fedex shipments). <br/>
     * If this field is not set, your shipments will be returned to the address_from.
     */
    addressReturn?: Address | undefined;
    /**
     * <a href="#tag/Addresses">Address</a> object of the recipient / buyer. Will be returned expanded by default.
     */
    addressTo: Address;
    /**
     * An array of object_ids of the carrier account objects to be used for getting shipping rates for this shipment.
     *
     * @remarks
     * If no carrier account object_ids are set in this field, Shippo will attempt to generate rates using all the
     * carrier accounts that have the `active` field set.
     */
    carrierAccounts: Array<string>;
    customsDeclaration?: CustomsDeclaration | undefined;
    messages: Array<ResponseMessage>;
    /**
     * Date and time of Shipment creation.
     */
    objectCreated: Date;
    /**
     * Unique identifier of the given Shipment object.
     */
    objectId: string;
    /**
     * Username of the user who created the Shipment object.
     */
    objectOwner: string;
    /**
     * Date and time of last Shipment update.
     */
    objectUpdated: Date;
    /**
     * List of Parcel objects to be shipped.
     */
    parcels: Array<Parcel>;
    /**
     * An array with all available rates. If <code>async</code> has been set to <code>false</code> in the request,
     *
     * @remarks
     * this will be populated with all available rates in the response. Otherwise rates will be created
     * asynchronously and this array will initially be empty.
     */
    rates: Array<Rate>;
    /**
     * `Waiting` shipments have been successfully submitted but not yet been processed.
     *
     * @remarks
     * `Queued` shipments are currently being processed.
     * `Success` shipments have been processed successfully, meaning that rate generation has concluded.
     * `Error` does not occur currently and is reserved for future use.
     */
    status: ShipmentStatus;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
};
/** @internal */
export declare const ShipmentStatus$inboundSchema: z.ZodNativeEnum<typeof ShipmentStatus>;
/** @internal */
export declare const ShipmentStatus$outboundSchema: z.ZodNativeEnum<typeof ShipmentStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ShipmentStatus$ {
    /** @deprecated use `ShipmentStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Error: "ERROR";
        readonly Queued: "QUEUED";
        readonly Success: "SUCCESS";
        readonly Waiting: "WAITING";
    }>;
    /** @deprecated use `ShipmentStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Error: "ERROR";
        readonly Queued: "QUEUED";
        readonly Success: "SUCCESS";
        readonly Waiting: "WAITING";
    }>;
}
/** @internal */
export declare const Shipment$inboundSchema: z.ZodType<Shipment, z.ZodTypeDef, unknown>;
/** @internal */
export type Shipment$Outbound = {
    extra?: ShipmentExtra$Outbound | undefined;
    metadata: string;
    shipment_date?: string | undefined;
    address_from: Address$Outbound;
    address_return?: Address$Outbound | undefined;
    address_to: Address$Outbound;
    carrier_accounts: Array<string>;
    customs_declaration?: CustomsDeclaration$Outbound | undefined;
    messages: Array<ResponseMessage$Outbound>;
    object_created: string;
    object_id: string;
    object_owner: string;
    object_updated: string;
    parcels: Array<Parcel$Outbound>;
    rates: Array<Rate$Outbound>;
    status: string;
    test?: boolean | undefined;
};
/** @internal */
export declare const Shipment$outboundSchema: z.ZodType<Shipment$Outbound, z.ZodTypeDef, Shipment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Shipment$ {
    /** @deprecated use `Shipment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Shipment, z.ZodTypeDef, unknown>;
    /** @deprecated use `Shipment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Shipment$Outbound, z.ZodTypeDef, Shipment>;
    /** @deprecated use `Shipment$Outbound` instead. */
    type Outbound = Shipment$Outbound;
}
export declare function shipmentToJSON(shipment: Shipment): string;
export declare function shipmentFromJSON(jsonString: string): SafeParseResult<Shipment, SDKValidationError>;
//# sourceMappingURL=shipment.d.ts.map