"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customsDeclarationCreateRequestFromJSON = exports.customsDeclarationCreateRequestToJSON = exports.CustomsDeclarationCreateRequest$ = exports.CustomsDeclarationCreateRequest$outboundSchema = exports.CustomsDeclarationCreateRequest$inboundSchema = exports.dutiesPayorFromJSON = exports.dutiesPayorToJSON = exports.DutiesPayor$ = exports.DutiesPayor$outboundSchema = exports.DutiesPayor$inboundSchema = exports.customsDeclarationCreateRequestAddressFromJSON = exports.customsDeclarationCreateRequestAddressToJSON = exports.CustomsDeclarationCreateRequestAddress$ = exports.CustomsDeclarationCreateRequestAddress$outboundSchema = exports.CustomsDeclarationCreateRequestAddress$inboundSchema = exports.CustomsDeclarationCreateRequestType$ = exports.CustomsDeclarationCreateRequestType$outboundSchema = exports.CustomsDeclarationCreateRequestType$inboundSchema = exports.CustomsDeclarationCreateRequestType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const addressimporter_js_1 = require("./addressimporter.js");
const customsdeclarationb13afilingoptionenum_js_1 = require("./customsdeclarationb13afilingoptionenum.js");
const customsdeclarationcontentstypeenum_js_1 = require("./customsdeclarationcontentstypeenum.js");
const customsdeclarationeelpfcenum_js_1 = require("./customsdeclarationeelpfcenum.js");
const customsdeclarationincotermenum_js_1 = require("./customsdeclarationincotermenum.js");
const customsdeclarationnondeliveryoptionenum_js_1 = require("./customsdeclarationnondeliveryoptionenum.js");
const customsexporteridentification_js_1 = require("./customsexporteridentification.js");
const customsitemcreaterequest_js_1 = require("./customsitemcreaterequest.js");
/**
 * Party to be billed for duties.
 */
exports.CustomsDeclarationCreateRequestType = {
    Sender: "SENDER",
    Recipient: "RECIPIENT",
    ThirdParty: "THIRD_PARTY",
};
/** @internal */
exports.CustomsDeclarationCreateRequestType$inboundSchema = z.nativeEnum(exports.CustomsDeclarationCreateRequestType);
/** @internal */
exports.CustomsDeclarationCreateRequestType$outboundSchema = exports.CustomsDeclarationCreateRequestType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsDeclarationCreateRequestType$;
(function (CustomsDeclarationCreateRequestType$) {
    /** @deprecated use `CustomsDeclarationCreateRequestType$inboundSchema` instead. */
    CustomsDeclarationCreateRequestType$.inboundSchema = exports.CustomsDeclarationCreateRequestType$inboundSchema;
    /** @deprecated use `CustomsDeclarationCreateRequestType$outboundSchema` instead. */
    CustomsDeclarationCreateRequestType$.outboundSchema = exports.CustomsDeclarationCreateRequestType$outboundSchema;
})(CustomsDeclarationCreateRequestType$ || (exports.CustomsDeclarationCreateRequestType$ = CustomsDeclarationCreateRequestType$ = {}));
/** @internal */
exports.CustomsDeclarationCreateRequestAddress$inboundSchema = z.object({
    name: z.string().optional(),
    zip: z.string().optional(),
    country: z.string().optional(),
});
/** @internal */
exports.CustomsDeclarationCreateRequestAddress$outboundSchema = z.object({
    name: z.string().optional(),
    zip: z.string().optional(),
    country: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsDeclarationCreateRequestAddress$;
(function (CustomsDeclarationCreateRequestAddress$) {
    /** @deprecated use `CustomsDeclarationCreateRequestAddress$inboundSchema` instead. */
    CustomsDeclarationCreateRequestAddress$.inboundSchema = exports.CustomsDeclarationCreateRequestAddress$inboundSchema;
    /** @deprecated use `CustomsDeclarationCreateRequestAddress$outboundSchema` instead. */
    CustomsDeclarationCreateRequestAddress$.outboundSchema = exports.CustomsDeclarationCreateRequestAddress$outboundSchema;
})(CustomsDeclarationCreateRequestAddress$ || (exports.CustomsDeclarationCreateRequestAddress$ = CustomsDeclarationCreateRequestAddress$ = {}));
function customsDeclarationCreateRequestAddressToJSON(customsDeclarationCreateRequestAddress) {
    return JSON.stringify(exports.CustomsDeclarationCreateRequestAddress$outboundSchema.parse(customsDeclarationCreateRequestAddress));
}
exports.customsDeclarationCreateRequestAddressToJSON = customsDeclarationCreateRequestAddressToJSON;
function customsDeclarationCreateRequestAddressFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomsDeclarationCreateRequestAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomsDeclarationCreateRequestAddress' from JSON`);
}
exports.customsDeclarationCreateRequestAddressFromJSON = customsDeclarationCreateRequestAddressFromJSON;
/** @internal */
exports.DutiesPayor$inboundSchema = z.object({
    account: z.string().optional(),
    type: exports.CustomsDeclarationCreateRequestType$inboundSchema.optional(),
    address: z.lazy(() => exports.CustomsDeclarationCreateRequestAddress$inboundSchema)
        .optional(),
});
/** @internal */
exports.DutiesPayor$outboundSchema = z.object({
    account: z.string().optional(),
    type: exports.CustomsDeclarationCreateRequestType$outboundSchema.optional(),
    address: z.lazy(() => exports.CustomsDeclarationCreateRequestAddress$outboundSchema)
        .optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var DutiesPayor$;
(function (DutiesPayor$) {
    /** @deprecated use `DutiesPayor$inboundSchema` instead. */
    DutiesPayor$.inboundSchema = exports.DutiesPayor$inboundSchema;
    /** @deprecated use `DutiesPayor$outboundSchema` instead. */
    DutiesPayor$.outboundSchema = exports.DutiesPayor$outboundSchema;
})(DutiesPayor$ || (exports.DutiesPayor$ = DutiesPayor$ = {}));
function dutiesPayorToJSON(dutiesPayor) {
    return JSON.stringify(exports.DutiesPayor$outboundSchema.parse(dutiesPayor));
}
exports.dutiesPayorToJSON = dutiesPayorToJSON;
function dutiesPayorFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.DutiesPayor$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'DutiesPayor' from JSON`);
}
exports.dutiesPayorFromJSON = dutiesPayorFromJSON;
/** @internal */
exports.CustomsDeclarationCreateRequest$inboundSchema = z.object({
    aes_itn: z.string().optional(),
    b13a_filing_option: customsdeclarationb13afilingoptionenum_js_1.CustomsDeclarationB13AFilingOptionEnum$inboundSchema
        .optional(),
    b13a_number: z.string().optional(),
    certificate: z.string().optional(),
    certify: z.boolean(),
    certify_signer: z.string(),
    commercial_invoice: z.boolean().optional(),
    contents_explanation: z.string().optional(),
    disclaimer: z.string().optional(),
    duties_payor: z.lazy(() => exports.DutiesPayor$inboundSchema).optional(),
    exporter_identification: customsexporteridentification_js_1.CustomsExporterIdentification$inboundSchema
        .optional(),
    exporter_reference: z.string().optional(),
    importer_reference: z.string().optional(),
    is_vat_collected: z.boolean().optional(),
    invoice: z.string().optional(),
    license: z.string().optional(),
    metadata: z.string().optional(),
    notes: z.string().optional(),
    address_importer: addressimporter_js_1.AddressImporter$inboundSchema.optional(),
    contents_type: customsdeclarationcontentstypeenum_js_1.CustomsDeclarationContentsTypeEnum$inboundSchema,
    eel_pfc: customsdeclarationeelpfcenum_js_1.CustomsDeclarationEelPfcEnum$inboundSchema.optional(),
    incoterm: customsdeclarationincotermenum_js_1.CustomsDeclarationIncotermEnum$inboundSchema.optional(),
    items: z.array(customsitemcreaterequest_js_1.CustomsItemCreateRequest$inboundSchema),
    non_delivery_option: customsdeclarationnondeliveryoptionenum_js_1.CustomsDeclarationNonDeliveryOptionEnum$inboundSchema,
    test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "aes_itn": "aesItn",
        "b13a_filing_option": "b13aFilingOption",
        "b13a_number": "b13aNumber",
        "certify_signer": "certifySigner",
        "commercial_invoice": "commercialInvoice",
        "contents_explanation": "contentsExplanation",
        "duties_payor": "dutiesPayor",
        "exporter_identification": "exporterIdentification",
        "exporter_reference": "exporterReference",
        "importer_reference": "importerReference",
        "is_vat_collected": "isVatCollected",
        "address_importer": "addressImporter",
        "contents_type": "contentsType",
        "eel_pfc": "eelPfc",
        "non_delivery_option": "nonDeliveryOption",
    });
});
/** @internal */
exports.CustomsDeclarationCreateRequest$outboundSchema = z.object({
    aesItn: z.string().optional(),
    b13aFilingOption: customsdeclarationb13afilingoptionenum_js_1.CustomsDeclarationB13AFilingOptionEnum$outboundSchema
        .optional(),
    b13aNumber: z.string().optional(),
    certificate: z.string().optional(),
    certify: z.boolean(),
    certifySigner: z.string(),
    commercialInvoice: z.boolean().optional(),
    contentsExplanation: z.string().optional(),
    disclaimer: z.string().optional(),
    dutiesPayor: z.lazy(() => exports.DutiesPayor$outboundSchema).optional(),
    exporterIdentification: customsexporteridentification_js_1.CustomsExporterIdentification$outboundSchema
        .optional(),
    exporterReference: z.string().optional(),
    importerReference: z.string().optional(),
    isVatCollected: z.boolean().optional(),
    invoice: z.string().optional(),
    license: z.string().optional(),
    metadata: z.string().optional(),
    notes: z.string().optional(),
    addressImporter: addressimporter_js_1.AddressImporter$outboundSchema.optional(),
    contentsType: customsdeclarationcontentstypeenum_js_1.CustomsDeclarationContentsTypeEnum$outboundSchema,
    eelPfc: customsdeclarationeelpfcenum_js_1.CustomsDeclarationEelPfcEnum$outboundSchema.optional(),
    incoterm: customsdeclarationincotermenum_js_1.CustomsDeclarationIncotermEnum$outboundSchema.optional(),
    items: z.array(customsitemcreaterequest_js_1.CustomsItemCreateRequest$outboundSchema),
    nonDeliveryOption: customsdeclarationnondeliveryoptionenum_js_1.CustomsDeclarationNonDeliveryOptionEnum$outboundSchema,
    test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        aesItn: "aes_itn",
        b13aFilingOption: "b13a_filing_option",
        b13aNumber: "b13a_number",
        certifySigner: "certify_signer",
        commercialInvoice: "commercial_invoice",
        contentsExplanation: "contents_explanation",
        dutiesPayor: "duties_payor",
        exporterIdentification: "exporter_identification",
        exporterReference: "exporter_reference",
        importerReference: "importer_reference",
        isVatCollected: "is_vat_collected",
        addressImporter: "address_importer",
        contentsType: "contents_type",
        eelPfc: "eel_pfc",
        nonDeliveryOption: "non_delivery_option",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsDeclarationCreateRequest$;
(function (CustomsDeclarationCreateRequest$) {
    /** @deprecated use `CustomsDeclarationCreateRequest$inboundSchema` instead. */
    CustomsDeclarationCreateRequest$.inboundSchema = exports.CustomsDeclarationCreateRequest$inboundSchema;
    /** @deprecated use `CustomsDeclarationCreateRequest$outboundSchema` instead. */
    CustomsDeclarationCreateRequest$.outboundSchema = exports.CustomsDeclarationCreateRequest$outboundSchema;
})(CustomsDeclarationCreateRequest$ || (exports.CustomsDeclarationCreateRequest$ = CustomsDeclarationCreateRequest$ = {}));
function customsDeclarationCreateRequestToJSON(customsDeclarationCreateRequest) {
    return JSON.stringify(exports.CustomsDeclarationCreateRequest$outboundSchema.parse(customsDeclarationCreateRequest));
}
exports.customsDeclarationCreateRequestToJSON = customsDeclarationCreateRequestToJSON;
function customsDeclarationCreateRequestFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomsDeclarationCreateRequest$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomsDeclarationCreateRequest' from JSON`);
}
exports.customsDeclarationCreateRequestFromJSON = customsDeclarationCreateRequestFromJSON;
//# sourceMappingURL=customsdeclarationcreaterequest.js.map