import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Rate, Rate$Outbound } from "./rate.js";
export type RatePaginatedList = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Rate> | undefined;
};
/** @internal */
export declare const RatePaginatedList$inboundSchema: z.ZodType<RatePaginatedList, z.ZodTypeDef, unknown>;
/** @internal */
export type RatePaginatedList$Outbound = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Rate$Outbound> | undefined;
};
/** @internal */
export declare const RatePaginatedList$outboundSchema: z.ZodType<RatePaginatedList$Outbound, z.ZodTypeDef, RatePaginatedList>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RatePaginatedList$ {
    /** @deprecated use `RatePaginatedList$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RatePaginatedList, z.ZodTypeDef, unknown>;
    /** @deprecated use `RatePaginatedList$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RatePaginatedList$Outbound, z.ZodTypeDef, RatePaginatedList>;
    /** @deprecated use `RatePaginatedList$Outbound` instead. */
    type Outbound = RatePaginatedList$Outbound;
}
export declare function ratePaginatedListToJSON(ratePaginatedList: RatePaginatedList): string;
export declare function ratePaginatedListFromJSON(jsonString: string): SafeParseResult<RatePaginatedList, SDKValidationError>;
//# sourceMappingURL=ratepaginatedlist.d.ts.map