"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackFromJSON = exports.trackToJSON = exports.Track$ = exports.Track$outboundSchema = exports.Track$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const servicelevelwithparent_js_1 = require("./servicelevelwithparent.js");
const trackingstatus_js_1 = require("./trackingstatus.js");
const trackingstatuslocationbase_js_1 = require("./trackingstatuslocationbase.js");
/** @internal */
exports.Track$inboundSchema = z
    .object({
    address_from: trackingstatuslocationbase_js_1.TrackingStatusLocationBase$inboundSchema.optional(),
    address_to: trackingstatuslocationbase_js_1.TrackingStatusLocationBase$inboundSchema.optional(),
    carrier: z.string(),
    eta: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    messages: z.array(z.string()),
    metadata: z.string().optional(),
    original_eta: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    servicelevel: servicelevelwithparent_js_1.ServiceLevelWithParent$inboundSchema.optional(),
    tracking_history: z.array(trackingstatus_js_1.TrackingStatus$inboundSchema),
    tracking_number: z.string(),
    tracking_status: trackingstatus_js_1.TrackingStatus$inboundSchema.optional(),
    transaction: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "address_from": "addressFrom",
        "address_to": "addressTo",
        "original_eta": "originalEta",
        "tracking_history": "trackingHistory",
        "tracking_number": "trackingNumber",
        "tracking_status": "trackingStatus",
    });
});
/** @internal */
exports.Track$outboundSchema = z.object({
    addressFrom: trackingstatuslocationbase_js_1.TrackingStatusLocationBase$outboundSchema.optional(),
    addressTo: trackingstatuslocationbase_js_1.TrackingStatusLocationBase$outboundSchema.optional(),
    carrier: z.string(),
    eta: z.date().transform(v => v.toISOString()).optional(),
    messages: z.array(z.string()),
    metadata: z.string().optional(),
    originalEta: z.date().transform(v => v.toISOString()).optional(),
    servicelevel: servicelevelwithparent_js_1.ServiceLevelWithParent$outboundSchema.optional(),
    trackingHistory: z.array(trackingstatus_js_1.TrackingStatus$outboundSchema),
    trackingNumber: z.string(),
    trackingStatus: trackingstatus_js_1.TrackingStatus$outboundSchema.optional(),
    transaction: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        addressFrom: "address_from",
        addressTo: "address_to",
        originalEta: "original_eta",
        trackingHistory: "tracking_history",
        trackingNumber: "tracking_number",
        trackingStatus: "tracking_status",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Track$;
(function (Track$) {
    /** @deprecated use `Track$inboundSchema` instead. */
    Track$.inboundSchema = exports.Track$inboundSchema;
    /** @deprecated use `Track$outboundSchema` instead. */
    Track$.outboundSchema = exports.Track$outboundSchema;
})(Track$ || (exports.Track$ = Track$ = {}));
function trackToJSON(track) {
    return JSON.stringify(exports.Track$outboundSchema.parse(track));
}
exports.trackToJSON = trackToJSON;
function trackFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Track$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Track' from JSON`);
}
exports.trackFromJSON = trackFromJSON;
//# sourceMappingURL=track.js.map