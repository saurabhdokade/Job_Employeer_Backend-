import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Specify that the package contains Dry Ice (FedEx, Veho, and UPS only).
 */
export type DryIce = {
    /**
     * Mandatory. Specifies that the package contains Dry Ice.
     */
    containsDryIce?: boolean | undefined;
    /**
     * Mandatory. Units must be in Kilograms. Cannot be greater than package weight.
     */
    weight?: string | undefined;
};
/** @internal */
export declare const DryIce$inboundSchema: z.ZodType<DryIce, z.ZodTypeDef, unknown>;
/** @internal */
export type DryIce$Outbound = {
    contains_dry_ice?: boolean | undefined;
    weight?: string | undefined;
};
/** @internal */
export declare const DryIce$outboundSchema: z.ZodType<DryIce$Outbound, z.ZodTypeDef, DryIce>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DryIce$ {
    /** @deprecated use `DryIce$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DryIce, z.ZodTypeDef, unknown>;
    /** @deprecated use `DryIce$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DryIce$Outbound, z.ZodTypeDef, DryIce>;
    /** @deprecated use `DryIce$Outbound` instead. */
    type Outbound = DryIce$Outbound;
}
export declare function dryIceToJSON(dryIce: DryIce): string;
export declare function dryIceFromJSON(jsonString: string): SafeParseResult<DryIce, SDKValidationError>;
//# sourceMappingURL=dryice.d.ts.map