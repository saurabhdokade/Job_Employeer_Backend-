import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Type of tax identification.
 *
 * @remarks
 * * `EIN` - Employer Identification Number, also known as a Federal Tax Identification Number.
 * * `VAT` - Value Added Tax identification number.
 * * `IOSS` - Import One-Stop Shop
 * * `ARN` - Australian Taxation Office Reference Number
 */
export declare const CustomsTaxIdentificationType: {
    readonly Ein: "EIN";
    readonly Vat: "VAT";
    readonly Ioss: "IOSS";
    readonly Arn: "ARN";
};
/**
 * Type of tax identification.
 *
 * @remarks
 * * `EIN` - Employer Identification Number, also known as a Federal Tax Identification Number.
 * * `VAT` - Value Added Tax identification number.
 * * `IOSS` - Import One-Stop Shop
 * * `ARN` - Australian Taxation Office Reference Number
 */
export type CustomsTaxIdentificationType = ClosedEnum<typeof CustomsTaxIdentificationType>;
/**
 * Tax identification that may be required to ship in certain countries. Typically used to assess duties on
 *
 * @remarks
 * goods that are crossing a border.
 */
export type CustomsTaxIdentification = {
    /**
     * Tax identification number.
     */
    number?: string | undefined;
    /**
     * Type of tax identification.
     *
     * @remarks
     * * `EIN` - Employer Identification Number, also known as a Federal Tax Identification Number.
     * * `VAT` - Value Added Tax identification number.
     * * `IOSS` - Import One-Stop Shop
     * * `ARN` - Australian Taxation Office Reference Number
     */
    type?: CustomsTaxIdentificationType | undefined;
};
/** @internal */
export declare const CustomsTaxIdentificationType$inboundSchema: z.ZodNativeEnum<typeof CustomsTaxIdentificationType>;
/** @internal */
export declare const CustomsTaxIdentificationType$outboundSchema: z.ZodNativeEnum<typeof CustomsTaxIdentificationType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomsTaxIdentificationType$ {
    /** @deprecated use `CustomsTaxIdentificationType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Ein: "EIN";
        readonly Vat: "VAT";
        readonly Ioss: "IOSS";
        readonly Arn: "ARN";
    }>;
    /** @deprecated use `CustomsTaxIdentificationType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Ein: "EIN";
        readonly Vat: "VAT";
        readonly Ioss: "IOSS";
        readonly Arn: "ARN";
    }>;
}
/** @internal */
export declare const CustomsTaxIdentification$inboundSchema: z.ZodType<CustomsTaxIdentification, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomsTaxIdentification$Outbound = {
    number?: string | undefined;
    type?: string | undefined;
};
/** @internal */
export declare const CustomsTaxIdentification$outboundSchema: z.ZodType<CustomsTaxIdentification$Outbound, z.ZodTypeDef, CustomsTaxIdentification>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomsTaxIdentification$ {
    /** @deprecated use `CustomsTaxIdentification$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomsTaxIdentification, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomsTaxIdentification$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomsTaxIdentification$Outbound, z.ZodTypeDef, CustomsTaxIdentification>;
    /** @deprecated use `CustomsTaxIdentification$Outbound` instead. */
    type Outbound = CustomsTaxIdentification$Outbound;
}
export declare function customsTaxIdentificationToJSON(customsTaxIdentification: CustomsTaxIdentification): string;
export declare function customsTaxIdentificationFromJSON(jsonString: string): SafeParseResult<CustomsTaxIdentification, SDKValidationError>;
//# sourceMappingURL=customstaxidentification.d.ts.map