import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AddressCreateRequest, AddressCreateRequest$Outbound } from "./addresscreaterequest.js";
import { LineItemBase, LineItemBase$Outbound } from "./lineitembase.js";
import { OrderStatusEnum } from "./orderstatusenum.js";
import { WeightUnitEnum } from "./weightunitenum.js";
export type OrderCreateRequest = {
    /**
     * **Required if total_price is provided**<br>
     *
     * @remarks
     * Currency of the <code>total_price</code> and <code>total_tax</code> amounts.
     */
    currency?: string | undefined;
    /**
     * Custom buyer- or seller-provided notes about the order.
     */
    notes?: string | undefined;
    /**
     * An alphanumeric identifier for the order used by the seller/buyer. This identifier doesn't need to be unique.
     */
    orderNumber?: string | undefined;
    /**
     * Current state of the order. See the <a href="https://docs.goshippo.com/docs/orders/orders/">orders tutorial</a>
     *
     * @remarks
     * for the logic of how the status is handled.
     */
    orderStatus?: OrderStatusEnum | undefined;
    /**
     * Date and time when the order was placed. This datetime can be different from the datetime of the order object creation on Shippo.
     */
    placedAt: string;
    /**
     * Amount paid by the buyer for shipping. This amount can be different from the price the seller will actually pay for shipping.
     */
    shippingCost?: string | undefined;
    /**
     * **Required if shipping_cost is provided**<br>
     *
     * @remarks
     * Currency of the <code>shipping_cost</code> amount.
     */
    shippingCostCurrency?: string | undefined;
    /**
     * Shipping method (carrier + service or other free text description) chosen by the buyer.
     *
     * @remarks
     * This value can be different from the shipping method the seller will actually choose.
     */
    shippingMethod?: string | undefined;
    subtotalPrice?: string | undefined;
    /**
     * Total amount paid by the buyer for this order.
     */
    totalPrice?: string | undefined;
    /**
     * Total tax amount paid by the buyer for this order.
     */
    totalTax?: string | undefined;
    /**
     * Total weight of the order.
     */
    weight?: string | undefined;
    /**
     * The unit used for weight.
     */
    weightUnit?: WeightUnitEnum | undefined;
    /**
     * <a href="#tag/Addresses">Address</a> object of the sender / seller. Will be returned expanded by default..
     */
    fromAddress?: AddressCreateRequest | undefined;
    /**
     * <a href="#tag/Addresses">Address</a> object of the recipient / buyer. Will be returned expanded by default.
     */
    toAddress: AddressCreateRequest;
    /**
     * Array of <a href="#section/Line-Item">line item</a> objects representing the items in this order.
     *
     * @remarks
     * All objects will be returned expanded by default.
     */
    lineItems?: Array<LineItemBase> | undefined;
};
/** @internal */
export declare const OrderCreateRequest$inboundSchema: z.ZodType<OrderCreateRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type OrderCreateRequest$Outbound = {
    currency?: string | undefined;
    notes?: string | undefined;
    order_number?: string | undefined;
    order_status?: string | undefined;
    placed_at: string;
    shipping_cost?: string | undefined;
    shipping_cost_currency?: string | undefined;
    shipping_method?: string | undefined;
    subtotal_price?: string | undefined;
    total_price?: string | undefined;
    total_tax?: string | undefined;
    weight?: string | undefined;
    weight_unit?: string | undefined;
    from_address?: AddressCreateRequest$Outbound | undefined;
    to_address: AddressCreateRequest$Outbound;
    line_items?: Array<LineItemBase$Outbound> | undefined;
};
/** @internal */
export declare const OrderCreateRequest$outboundSchema: z.ZodType<OrderCreateRequest$Outbound, z.ZodTypeDef, OrderCreateRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OrderCreateRequest$ {
    /** @deprecated use `OrderCreateRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OrderCreateRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `OrderCreateRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OrderCreateRequest$Outbound, z.ZodTypeDef, OrderCreateRequest>;
    /** @deprecated use `OrderCreateRequest$Outbound` instead. */
    type Outbound = OrderCreateRequest$Outbound;
}
export declare function orderCreateRequestToJSON(orderCreateRequest: OrderCreateRequest): string;
export declare function orderCreateRequestFromJSON(jsonString: string): SafeParseResult<OrderCreateRequest, SDKValidationError>;
//# sourceMappingURL=ordercreaterequest.d.ts.map