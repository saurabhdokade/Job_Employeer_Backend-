import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ObjectStateEnum } from "./objectstateenum.js";
import { WeightUnitEnum } from "./weightunitenum.js";
export type CustomsItem = {
    /**
     * Text description of your item.
     */
    description: string;
    /**
     * Export Control Classification Number, required on some exports from the United States.
     */
    eccnEar99?: string | undefined;
    /**
     * The unit used for weight.
     */
    massUnit: WeightUnitEnum;
    /**
     * A string of up to 100 characters that can be filled with any additional information you
     *
     * @remarks
     * want to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * Total weight of this item, i.e. quantity * weight per item.
     */
    netWeight: string;
    /**
     * Country of origin of the item. Example: `US` or `DE`.
     *
     * @remarks
     * All accepted values can be found on the <a href="http://www.iso.org/" target="_blank">Official ISO Website</a>.
     */
    originCountry: string;
    /**
     * Quantity of this item in the shipment you send.  Must be greater than 0.
     */
    quantity: number;
    /**
     * SKU code of the item, which is required by some carriers.
     */
    skuCode?: string | undefined;
    /**
     * HS code of the item, which is required by some carriers. If `tariff_number` is not provided, `hs_code` will be used.  If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 50 character limit.
     */
    hsCode?: string | undefined;
    /**
     * The tariff number of the item. If `tariff_number` is not provided, `hs_code` will be used. If both `hs_code` and `tariff_number` are provided, `tariff_number` will be used. 12 character limit.
     */
    tariffNumber?: string | undefined;
    /**
     * Total value of this item, i.e. quantity * value per item.
     */
    valueAmount: string;
    /**
     * Currency used for value_amount. The <a href="http://www.xe.com/iso4217.php">official ISO 4217</a>
     *
     * @remarks
     * currency codes are used, e.g.  `USD` or `EUR`.
     */
    valueCurrency: string;
    /**
     * Date and time of object creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the object.
     */
    objectOwner?: string | undefined;
    /**
     * Indicates the validity of the enclosing object
     */
    objectState?: ObjectStateEnum | undefined;
    /**
     * Date and time of last object update.
     */
    objectUpdated?: Date | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
};
/** @internal */
export declare const CustomsItem$inboundSchema: z.ZodType<CustomsItem, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomsItem$Outbound = {
    description: string;
    eccn_ear99?: string | undefined;
    mass_unit: string;
    metadata?: string | undefined;
    net_weight: string;
    origin_country: string;
    quantity: number;
    sku_code?: string | undefined;
    hs_code?: string | undefined;
    tariff_number?: string | undefined;
    value_amount: string;
    value_currency: string;
    object_created?: string | undefined;
    object_id?: string | undefined;
    object_owner?: string | undefined;
    object_state?: string | undefined;
    object_updated?: string | undefined;
    test?: boolean | undefined;
};
/** @internal */
export declare const CustomsItem$outboundSchema: z.ZodType<CustomsItem$Outbound, z.ZodTypeDef, CustomsItem>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomsItem$ {
    /** @deprecated use `CustomsItem$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomsItem, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomsItem$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomsItem$Outbound, z.ZodTypeDef, CustomsItem>;
    /** @deprecated use `CustomsItem$Outbound` instead. */
    type Outbound = CustomsItem$Outbound;
}
export declare function customsItemToJSON(customsItem: CustomsItem): string;
export declare function customsItemFromJSON(jsonString: string): SafeParseResult<CustomsItem, SDKValidationError>;
//# sourceMappingURL=customsitem.d.ts.map