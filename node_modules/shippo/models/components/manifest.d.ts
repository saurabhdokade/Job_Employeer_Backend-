import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Indicates the status of the manifest.
 */
export declare const ManifestStatus: {
    readonly Queued: "QUEUED";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
/**
 * Indicates the status of the manifest.
 */
export type ManifestStatus = ClosedEnum<typeof ManifestStatus>;
export type Manifest = {
    /**
     * ID of carrier account
     */
    carrierAccount: string;
    /**
     * All shipments to be submitted on this day will be closed out.
     *
     * @remarks
     * Must be in the format `2014-01-18T00:35:03.463Z` (ISO 8601 date).
     */
    shipmentDate: string;
    /**
     * IDs transactions to use. If you set this to null or not send this parameter,
     *
     * @remarks
     * Shippo will automatically assign all applicable transactions.
     */
    transactions?: Array<string> | undefined;
    /**
     * ID of the Address object that should be used as pickup address for the scan form.
     *
     * @remarks
     * The USPS will validate this address before creating the scan form.
     */
    addressFrom: string;
    /**
     * An array containing the URLs to all returned manifest documents.
     */
    documents: Array<string>;
    /**
     * An array of codes and messages describing the error that occurred if any.
     */
    errors?: Array<string> | undefined;
    /**
     * Date and time of object creation.
     */
    objectCreated: Date;
    /**
     * Unique identifier of the given object.
     */
    objectId: string;
    /**
     * Username of the user who created the object.
     */
    objectOwner: string;
    /**
     * Date and time of last object update.
     */
    objectUpdated: Date;
    /**
     * Indicates the status of the manifest.
     */
    status: ManifestStatus;
};
/** @internal */
export declare const ManifestStatus$inboundSchema: z.ZodNativeEnum<typeof ManifestStatus>;
/** @internal */
export declare const ManifestStatus$outboundSchema: z.ZodNativeEnum<typeof ManifestStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ManifestStatus$ {
    /** @deprecated use `ManifestStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Success: "SUCCESS";
        readonly Error: "ERROR";
    }>;
    /** @deprecated use `ManifestStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Success: "SUCCESS";
        readonly Error: "ERROR";
    }>;
}
/** @internal */
export declare const Manifest$inboundSchema: z.ZodType<Manifest, z.ZodTypeDef, unknown>;
/** @internal */
export type Manifest$Outbound = {
    carrier_account: string;
    shipment_date: string;
    transactions?: Array<string> | undefined;
    address_from: string;
    documents: Array<string>;
    errors?: Array<string> | undefined;
    object_created: string;
    object_id: string;
    object_owner: string;
    object_updated: string;
    status: string;
};
/** @internal */
export declare const Manifest$outboundSchema: z.ZodType<Manifest$Outbound, z.ZodTypeDef, Manifest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Manifest$ {
    /** @deprecated use `Manifest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Manifest, z.ZodTypeDef, unknown>;
    /** @deprecated use `Manifest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Manifest$Outbound, z.ZodTypeDef, Manifest>;
    /** @deprecated use `Manifest$Outbound` instead. */
    type Outbound = Manifest$Outbound;
}
export declare function manifestToJSON(manifest: Manifest): string;
export declare function manifestFromJSON(jsonString: string): SafeParseResult<Manifest, SDKValidationError>;
//# sourceMappingURL=manifest.d.ts.map