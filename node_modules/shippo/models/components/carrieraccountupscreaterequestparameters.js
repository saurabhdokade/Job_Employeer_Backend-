"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.carrierAccountUPSCreateRequestParametersFromJSON = exports.carrierAccountUPSCreateRequestParametersToJSON = exports.CarrierAccountUPSCreateRequestParameters$ = exports.CarrierAccountUPSCreateRequestParameters$outboundSchema = exports.CarrierAccountUPSCreateRequestParameters$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/** @internal */
exports.CarrierAccountUPSCreateRequestParameters$inboundSchema = z.object({
    billing_address_city: z.string(),
    billing_address_country_iso2: z.string(),
    billing_address_state: z.string(),
    billing_address_street1: z.string(),
    billing_address_street2: z.string().optional(),
    billing_address_zip: z.string(),
    company: z.string().optional(),
    email: z.string().optional(),
    full_name: z.string().optional(),
    phone: z.string().optional(),
    pickup_address_city: z.string(),
    pickup_address_country_iso2: z.string(),
    pickup_address_same_as_billing_address: z.boolean().optional(),
    pickup_address_state: z.string(),
    pickup_address_street1: z.string(),
    pickup_address_street2: z.string().optional(),
    pickup_address_zip: z.string(),
    ups_agreements: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "billing_address_city": "billingAddressCity",
        "billing_address_country_iso2": "billingAddressCountryIso2",
        "billing_address_state": "billingAddressState",
        "billing_address_street1": "billingAddressStreet1",
        "billing_address_street2": "billingAddressStreet2",
        "billing_address_zip": "billingAddressZip",
        "full_name": "fullName",
        "pickup_address_city": "pickupAddressCity",
        "pickup_address_country_iso2": "pickupAddressCountryIso2",
        "pickup_address_same_as_billing_address": "pickupAddressSameAsBillingAddress",
        "pickup_address_state": "pickupAddressState",
        "pickup_address_street1": "pickupAddressStreet1",
        "pickup_address_street2": "pickupAddressStreet2",
        "pickup_address_zip": "pickupAddressZip",
        "ups_agreements": "upsAgreements",
    });
});
/** @internal */
exports.CarrierAccountUPSCreateRequestParameters$outboundSchema = z.object({
    billingAddressCity: z.string(),
    billingAddressCountryIso2: z.string(),
    billingAddressState: z.string(),
    billingAddressStreet1: z.string(),
    billingAddressStreet2: z.string().optional(),
    billingAddressZip: z.string(),
    company: z.string().optional(),
    email: z.string().optional(),
    fullName: z.string().optional(),
    phone: z.string().optional(),
    pickupAddressCity: z.string(),
    pickupAddressCountryIso2: z.string(),
    pickupAddressSameAsBillingAddress: z.boolean().optional(),
    pickupAddressState: z.string(),
    pickupAddressStreet1: z.string(),
    pickupAddressStreet2: z.string().optional(),
    pickupAddressZip: z.string(),
    upsAgreements: z.boolean(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        billingAddressCity: "billing_address_city",
        billingAddressCountryIso2: "billing_address_country_iso2",
        billingAddressState: "billing_address_state",
        billingAddressStreet1: "billing_address_street1",
        billingAddressStreet2: "billing_address_street2",
        billingAddressZip: "billing_address_zip",
        fullName: "full_name",
        pickupAddressCity: "pickup_address_city",
        pickupAddressCountryIso2: "pickup_address_country_iso2",
        pickupAddressSameAsBillingAddress: "pickup_address_same_as_billing_address",
        pickupAddressState: "pickup_address_state",
        pickupAddressStreet1: "pickup_address_street1",
        pickupAddressStreet2: "pickup_address_street2",
        pickupAddressZip: "pickup_address_zip",
        upsAgreements: "ups_agreements",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CarrierAccountUPSCreateRequestParameters$;
(function (CarrierAccountUPSCreateRequestParameters$) {
    /** @deprecated use `CarrierAccountUPSCreateRequestParameters$inboundSchema` instead. */
    CarrierAccountUPSCreateRequestParameters$.inboundSchema = exports.CarrierAccountUPSCreateRequestParameters$inboundSchema;
    /** @deprecated use `CarrierAccountUPSCreateRequestParameters$outboundSchema` instead. */
    CarrierAccountUPSCreateRequestParameters$.outboundSchema = exports.CarrierAccountUPSCreateRequestParameters$outboundSchema;
})(CarrierAccountUPSCreateRequestParameters$ || (exports.CarrierAccountUPSCreateRequestParameters$ = CarrierAccountUPSCreateRequestParameters$ = {}));
function carrierAccountUPSCreateRequestParametersToJSON(carrierAccountUPSCreateRequestParameters) {
    return JSON.stringify(exports.CarrierAccountUPSCreateRequestParameters$outboundSchema.parse(carrierAccountUPSCreateRequestParameters));
}
exports.carrierAccountUPSCreateRequestParametersToJSON = carrierAccountUPSCreateRequestParametersToJSON;
function carrierAccountUPSCreateRequestParametersFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CarrierAccountUPSCreateRequestParameters$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CarrierAccountUPSCreateRequestParameters' from JSON`);
}
exports.carrierAccountUPSCreateRequestParametersFromJSON = carrierAccountUPSCreateRequestParametersFromJSON;
//# sourceMappingURL=carrieraccountupscreaterequestparameters.js.map