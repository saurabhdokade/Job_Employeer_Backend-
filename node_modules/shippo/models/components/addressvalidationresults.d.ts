import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AddressValidationResultsMessage, AddressValidationResultsMessage$Outbound } from "./addressvalidationresultsmessage.js";
/**
 * Object that contains information regarding if an address had been validated or not. Also contains any messages
 *
 * @remarks
 * generated during validation. Children keys are <code>is_valid</code>(boolean) and <code>messages</code>(array).
 */
export type AddressValidationResults = {
    isValid?: boolean | undefined;
    messages?: Array<AddressValidationResultsMessage> | undefined;
};
/** @internal */
export declare const AddressValidationResults$inboundSchema: z.ZodType<AddressValidationResults, z.ZodTypeDef, unknown>;
/** @internal */
export type AddressValidationResults$Outbound = {
    is_valid?: boolean | undefined;
    messages?: Array<AddressValidationResultsMessage$Outbound> | undefined;
};
/** @internal */
export declare const AddressValidationResults$outboundSchema: z.ZodType<AddressValidationResults$Outbound, z.ZodTypeDef, AddressValidationResults>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AddressValidationResults$ {
    /** @deprecated use `AddressValidationResults$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AddressValidationResults, z.ZodTypeDef, unknown>;
    /** @deprecated use `AddressValidationResults$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AddressValidationResults$Outbound, z.ZodTypeDef, AddressValidationResults>;
    /** @deprecated use `AddressValidationResults$Outbound` instead. */
    type Outbound = AddressValidationResults$Outbound;
}
export declare function addressValidationResultsToJSON(addressValidationResults: AddressValidationResults): string;
export declare function addressValidationResultsFromJSON(jsonString: string): SafeParseResult<AddressValidationResults, SDKValidationError>;
//# sourceMappingURL=addressvalidationresults.d.ts.map