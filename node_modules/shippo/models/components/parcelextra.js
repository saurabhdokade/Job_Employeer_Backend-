"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parcelExtraFromJSON = exports.parcelExtraToJSON = exports.ParcelExtra$ = exports.ParcelExtra$outboundSchema = exports.ParcelExtra$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const cod_js_1 = require("./cod.js");
const parcelinsurance_js_1 = require("./parcelinsurance.js");
/** @internal */
exports.ParcelExtra$inboundSchema = z.object({
    COD: cod_js_1.Cod$inboundSchema.optional(),
    insurance: parcelinsurance_js_1.ParcelInsurance$inboundSchema.optional(),
    reference_1: z.string().optional(),
    reference_2: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "COD": "cod",
        "reference_1": "reference1",
        "reference_2": "reference2",
    });
});
/** @internal */
exports.ParcelExtra$outboundSchema = z.object({
    cod: cod_js_1.Cod$outboundSchema.optional(),
    insurance: parcelinsurance_js_1.ParcelInsurance$outboundSchema.optional(),
    reference1: z.string().optional(),
    reference2: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        cod: "COD",
        reference1: "reference_1",
        reference2: "reference_2",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ParcelExtra$;
(function (ParcelExtra$) {
    /** @deprecated use `ParcelExtra$inboundSchema` instead. */
    ParcelExtra$.inboundSchema = exports.ParcelExtra$inboundSchema;
    /** @deprecated use `ParcelExtra$outboundSchema` instead. */
    ParcelExtra$.outboundSchema = exports.ParcelExtra$outboundSchema;
})(ParcelExtra$ || (exports.ParcelExtra$ = ParcelExtra$ = {}));
function parcelExtraToJSON(parcelExtra) {
    return JSON.stringify(exports.ParcelExtra$outboundSchema.parse(parcelExtra));
}
exports.parcelExtraToJSON = parcelExtraToJSON;
function parcelExtraFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ParcelExtra$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ParcelExtra' from JSON`);
}
exports.parcelExtraFromJSON = parcelExtraFromJSON;
//# sourceMappingURL=parcelextra.js.map