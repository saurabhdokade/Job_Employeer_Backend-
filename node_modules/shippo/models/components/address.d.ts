import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AddressValidationResults, AddressValidationResults$Outbound } from "./addressvalidationresults.js";
export type Latitude = number | string;
export type Longitude = number | string;
/**
 * Address represents the address as retrieved from the database
 */
export type Address = {
    /**
     * **required for purchase**<br>
     *
     * @remarks
     * First and Last Name of the addressee
     */
    name?: string | undefined;
    /**
     * Company Name
     */
    company?: string | undefined;
    /**
     * **required for purchase**<br>
     *
     * @remarks
     * First street line, 35 character limit. Usually street number and street name (except for DHL Germany, see street_no).
     */
    street1?: string | undefined;
    /**
     * Second street line, 35 character limit.
     */
    street2?: string | undefined;
    /**
     * Third street line, 35 character limit.
     *
     * @remarks
     * Only accepted for USPS international shipments, UPS domestic and UPS international shipments.
     */
    street3?: string | undefined;
    /**
     * Street number of the addressed building.
     *
     * @remarks
     * This field can be included in street1 for all carriers except for DHL Germany.
     */
    streetNo?: string | undefined;
    /**
     * **required for purchase**<br>
     *
     * @remarks
     * Name of a city. When creating a Quote Address, sending a city is optional but will yield more accurate Rates.
     * Please bear in mind that city names may be ambiguous (there are 34 Springfields in the US). Pass in a state
     * or a ZIP code (see below), if known, it will yield more accurate results.
     */
    city?: string | undefined;
    /**
     * **required for purchase for some countries**<br>
     *
     * @remarks
     * State/Province values are required for shipments from/to the US, AU, and CA. UPS requires province for some
     * countries (i.e Ireland). To receive more accurate quotes, passing this field is recommended. Most carriers
     * only accept two or three character state abbreviations.
     */
    state?: string | undefined;
    /**
     * **required for purchase**<br>
     *
     * @remarks
     * Postal code of an Address. When creating a Quote Addresses, sending a ZIP is optional but will yield more
     * accurate Rates.
     */
    zip?: string | undefined;
    /**
     * ISO 3166-1 alpha-2 country codes and country names can be used. For most consistent results, we reccomend using country codes like `US` or `DE`.
     *
     * @remarks
     * If using country names, please ensure they are spelled correctly and in English. Country names are converted to country codes.
     * Refer to this <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements" target="_blank">guide</a> for a list of country codes.
     * Sending a country is always required.
     */
    country: string;
    /**
     * Addresses containing a phone number allow carriers to call the recipient when delivering the Parcel. This
     *
     * @remarks
     * increases the probability of delivery and helps to avoid accessorial charges after a Parcel has been shipped.
     */
    phone?: string | undefined;
    /**
     * E-mail address of the contact person, RFC3696/5321-compliant.
     */
    email?: string | undefined;
    isResidential?: boolean | undefined;
    /**
     * A string of up to 100 characters that can be filled with any additional information you want
     *
     * @remarks
     * to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * Complete addresses contain all required values.<br><br>Incomplete addresses have failed one or multiple
     *
     * @remarks
     * validations.<br>Incomplete Addresses are eligible for requesting rates but lack at least one required
     * value for purchasing labels.
     */
    isComplete?: boolean | undefined;
    /**
     * Latitude of address
     */
    latitude?: number | string | undefined;
    /**
     * Longitude of address
     */
    longitude?: number | string | undefined;
    /**
     * Date and time of Address creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given Address object.
     *
     * @remarks
     * This ID is required to create a Shipment object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the Address object.
     */
    objectOwner?: string | undefined;
    /**
     * Date and time of last Address update. Since you cannot update Addresses after they were created, this time
     *
     * @remarks
     * stamp reflects the time when the Address was changed by Shippo's systems for the last time, e.g., during the
     * approximation of one or more values.
     */
    objectUpdated?: Date | undefined;
    /**
     * Object that contains information regarding if an address had been validated or not. Also contains any messages
     *
     * @remarks
     * generated during validation. Children keys are <code>is_valid</code>(boolean) and <code>messages</code>(array).
     */
    validationResults?: AddressValidationResults | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
};
/** @internal */
export declare const Latitude$inboundSchema: z.ZodType<Latitude, z.ZodTypeDef, unknown>;
/** @internal */
export type Latitude$Outbound = number | string;
/** @internal */
export declare const Latitude$outboundSchema: z.ZodType<Latitude$Outbound, z.ZodTypeDef, Latitude>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Latitude$ {
    /** @deprecated use `Latitude$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Latitude, z.ZodTypeDef, unknown>;
    /** @deprecated use `Latitude$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Latitude$Outbound, z.ZodTypeDef, Latitude>;
    /** @deprecated use `Latitude$Outbound` instead. */
    type Outbound = Latitude$Outbound;
}
export declare function latitudeToJSON(latitude: Latitude): string;
export declare function latitudeFromJSON(jsonString: string): SafeParseResult<Latitude, SDKValidationError>;
/** @internal */
export declare const Longitude$inboundSchema: z.ZodType<Longitude, z.ZodTypeDef, unknown>;
/** @internal */
export type Longitude$Outbound = number | string;
/** @internal */
export declare const Longitude$outboundSchema: z.ZodType<Longitude$Outbound, z.ZodTypeDef, Longitude>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Longitude$ {
    /** @deprecated use `Longitude$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Longitude, z.ZodTypeDef, unknown>;
    /** @deprecated use `Longitude$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Longitude$Outbound, z.ZodTypeDef, Longitude>;
    /** @deprecated use `Longitude$Outbound` instead. */
    type Outbound = Longitude$Outbound;
}
export declare function longitudeToJSON(longitude: Longitude): string;
export declare function longitudeFromJSON(jsonString: string): SafeParseResult<Longitude, SDKValidationError>;
/** @internal */
export declare const Address$inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown>;
/** @internal */
export type Address$Outbound = {
    name?: string | undefined;
    company?: string | undefined;
    street1?: string | undefined;
    street2?: string | undefined;
    street3?: string | undefined;
    street_no?: string | undefined;
    city?: string | undefined;
    state?: string | undefined;
    zip?: string | undefined;
    country: string;
    phone?: string | undefined;
    email?: string | undefined;
    is_residential?: boolean | undefined;
    metadata?: string | undefined;
    is_complete?: boolean | undefined;
    latitude?: number | string | undefined;
    longitude?: number | string | undefined;
    object_created?: string | undefined;
    object_id?: string | undefined;
    object_owner?: string | undefined;
    object_updated?: string | undefined;
    validation_results?: AddressValidationResults$Outbound | undefined;
    test?: boolean | undefined;
};
/** @internal */
export declare const Address$outboundSchema: z.ZodType<Address$Outbound, z.ZodTypeDef, Address>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Address$ {
    /** @deprecated use `Address$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Address, z.ZodTypeDef, unknown>;
    /** @deprecated use `Address$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Address$Outbound, z.ZodTypeDef, Address>;
    /** @deprecated use `Address$Outbound` instead. */
    type Outbound = Address$Outbound;
}
export declare function addressToJSON(address: Address): string;
export declare function addressFromJSON(jsonString: string): SafeParseResult<Address, SDKValidationError>;
//# sourceMappingURL=address.d.ts.map