import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Location, Location$Outbound } from "./location.js";
/**
 * Indicates the status of the pickup.
 */
export declare const PickupStatus: {
    readonly Pending: "PENDING";
    readonly Confirmed: "CONFIRMED";
    readonly Error: "ERROR";
    readonly Cancelled: "CANCELLED";
};
/**
 * Indicates the status of the pickup.
 */
export type PickupStatus = ClosedEnum<typeof PickupStatus>;
export type Pickup = {
    /**
     * The object ID of your USPS or DHL Express carrier account.
     *
     * @remarks
     * You can retrieve this from your Rate requests or our <a href="#tag/Carrier-Accounts/">Carrier Accounts</a> endpoint.
     */
    carrierAccount: string;
    /**
     * Location where the parcel(s) will be picked up.
     */
    location: Location;
    /**
     * A string of up to 100 characters that can be filled with any additional information you
     *
     * @remarks
     * want to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * The latest that you requested your parcels to be available for pickup.
     *
     * @remarks
     * Expressed in the timezone specified in the response.
     */
    requestedEndTime: Date;
    /**
     * The earliest that you requested your parcels to be ready for pickup.
     *
     * @remarks
     * Expressed in the timezone specified in the response.
     */
    requestedStartTime: Date;
    /**
     * The transaction(s) object ID(s) for the parcel(s) that need to be picked up.
     */
    transactions: Array<string>;
    /**
     * Date and time of Pickup creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given Pickup object.
     */
    objectId?: string | undefined;
    /**
     * Date and time of last Pickup update.
     */
    objectUpdated?: Date | undefined;
    /**
     * The earliest that your parcels will be ready for pickup, confirmed by the carrier.
     *
     * @remarks
     * Expressed in the timezone specified in the response.
     */
    confirmedStartTime?: string | undefined;
    /**
     * The latest that your parcels will be available for pickup, confirmed by the carrier.
     *
     * @remarks
     * Expressed in the timezone specified in the response.
     */
    confirmedEndTime?: string | undefined;
    /**
     * The latest time to cancel a pickup. Expressed in the timezone specified in the response.
     *
     * @remarks
     * To cancel a pickup, you will need to contact the carrier directly.
     * The ability to cancel a pickup through Shippo may be released in future iterations.
     */
    cancelByTime?: string | undefined;
    /**
     * Indicates the status of the pickup.
     */
    status?: PickupStatus | undefined;
    /**
     * Pickup's confirmation code returned by the carrier.
     *
     * @remarks
     * To edit or cancel a pickup, you will need to contact USPS or DHL Express directly and provide your `confirmation_code`.
     */
    confirmationCode?: string | undefined;
    /**
     * The pickup time windows will be in the time zone specified here, not UTC.
     */
    timezone?: string | undefined;
    /**
     * An array containing strings of any messages generated during validation.
     */
    messages?: Array<string> | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    isTest?: boolean | undefined;
};
/** @internal */
export declare const PickupStatus$inboundSchema: z.ZodNativeEnum<typeof PickupStatus>;
/** @internal */
export declare const PickupStatus$outboundSchema: z.ZodNativeEnum<typeof PickupStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PickupStatus$ {
    /** @deprecated use `PickupStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Pending: "PENDING";
        readonly Confirmed: "CONFIRMED";
        readonly Error: "ERROR";
        readonly Cancelled: "CANCELLED";
    }>;
    /** @deprecated use `PickupStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Pending: "PENDING";
        readonly Confirmed: "CONFIRMED";
        readonly Error: "ERROR";
        readonly Cancelled: "CANCELLED";
    }>;
}
/** @internal */
export declare const Pickup$inboundSchema: z.ZodType<Pickup, z.ZodTypeDef, unknown>;
/** @internal */
export type Pickup$Outbound = {
    carrier_account: string;
    location: Location$Outbound;
    metadata?: string | undefined;
    requested_end_time: string;
    requested_start_time: string;
    transactions: Array<string>;
    object_created?: string | undefined;
    object_id?: string | undefined;
    object_updated?: string | undefined;
    confirmed_start_time?: string | undefined;
    confirmed_end_time?: string | undefined;
    cancel_by_time?: string | undefined;
    status?: string | undefined;
    confirmation_code?: string | undefined;
    timezone?: string | undefined;
    messages?: Array<string> | undefined;
    is_test?: boolean | undefined;
};
/** @internal */
export declare const Pickup$outboundSchema: z.ZodType<Pickup$Outbound, z.ZodTypeDef, Pickup>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Pickup$ {
    /** @deprecated use `Pickup$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Pickup, z.ZodTypeDef, unknown>;
    /** @deprecated use `Pickup$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Pickup$Outbound, z.ZodTypeDef, Pickup>;
    /** @deprecated use `Pickup$Outbound` instead. */
    type Outbound = Pickup$Outbound;
}
export declare function pickupToJSON(pickup: Pickup): string;
export declare function pickupFromJSON(jsonString: string): SafeParseResult<Pickup, SDKValidationError>;
//# sourceMappingURL=pickup.d.ts.map