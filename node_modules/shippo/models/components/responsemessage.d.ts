import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Message returned with supporting information from a request. In some cases this can be an error message,
 *
 * @remarks
 * for example a timeout from a carrier. If available, the origin of the message is displayed in `source`.
 */
export type ResponseMessage = {
    /**
     * Origin of message
     */
    source?: string | undefined;
    /**
     * Classification of message
     */
    code?: string | undefined;
    /**
     * Message content
     */
    text?: string | undefined;
};
/** @internal */
export declare const ResponseMessage$inboundSchema: z.ZodType<ResponseMessage, z.ZodTypeDef, unknown>;
/** @internal */
export type ResponseMessage$Outbound = {
    source?: string | undefined;
    code?: string | undefined;
    text?: string | undefined;
};
/** @internal */
export declare const ResponseMessage$outboundSchema: z.ZodType<ResponseMessage$Outbound, z.ZodTypeDef, ResponseMessage>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ResponseMessage$ {
    /** @deprecated use `ResponseMessage$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ResponseMessage, z.ZodTypeDef, unknown>;
    /** @deprecated use `ResponseMessage$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ResponseMessage$Outbound, z.ZodTypeDef, ResponseMessage>;
    /** @deprecated use `ResponseMessage$Outbound` instead. */
    type Outbound = ResponseMessage$Outbound;
}
export declare function responseMessageToJSON(responseMessage: ResponseMessage): string;
export declare function responseMessageFromJSON(jsonString: string): SafeParseResult<ResponseMessage, SDKValidationError>;
//# sourceMappingURL=responsemessage.d.ts.map