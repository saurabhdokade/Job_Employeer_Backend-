import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Transaction, Transaction$Outbound } from "./transaction.js";
import { WebhookEventTypeEnum } from "./webhookeventtypeenum.js";
/**
 * Content of the webhook posted to the external URL
 */
export type WebhookPayloadTransaction = {
    /**
     * Type of event that triggered the webhook.
     */
    event?: WebhookEventTypeEnum | undefined;
    /**
     * Determines whether the webhook is a test webhook or not.
     */
    test?: boolean | undefined;
    data?: Transaction | undefined;
};
/** @internal */
export declare const WebhookPayloadTransaction$inboundSchema: z.ZodType<WebhookPayloadTransaction, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookPayloadTransaction$Outbound = {
    event?: string | undefined;
    test?: boolean | undefined;
    data?: Transaction$Outbound | undefined;
};
/** @internal */
export declare const WebhookPayloadTransaction$outboundSchema: z.ZodType<WebhookPayloadTransaction$Outbound, z.ZodTypeDef, WebhookPayloadTransaction>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookPayloadTransaction$ {
    /** @deprecated use `WebhookPayloadTransaction$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookPayloadTransaction, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookPayloadTransaction$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookPayloadTransaction$Outbound, z.ZodTypeDef, WebhookPayloadTransaction>;
    /** @deprecated use `WebhookPayloadTransaction$Outbound` instead. */
    type Outbound = WebhookPayloadTransaction$Outbound;
}
export declare function webhookPayloadTransactionToJSON(webhookPayloadTransaction: WebhookPayloadTransaction): string;
export declare function webhookPayloadTransactionFromJSON(jsonString: string): SafeParseResult<WebhookPayloadTransaction, SDKValidationError>;
//# sourceMappingURL=webhookpayloadtransaction.d.ts.map