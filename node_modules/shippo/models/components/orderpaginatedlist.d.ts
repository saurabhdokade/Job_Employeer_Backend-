import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Order, Order$Outbound } from "./order.js";
export type OrderPaginatedList = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Order> | undefined;
};
/** @internal */
export declare const OrderPaginatedList$inboundSchema: z.ZodType<OrderPaginatedList, z.ZodTypeDef, unknown>;
/** @internal */
export type OrderPaginatedList$Outbound = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Order$Outbound> | undefined;
};
/** @internal */
export declare const OrderPaginatedList$outboundSchema: z.ZodType<OrderPaginatedList$Outbound, z.ZodTypeDef, OrderPaginatedList>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace OrderPaginatedList$ {
    /** @deprecated use `OrderPaginatedList$inboundSchema` instead. */
    const inboundSchema: z.ZodType<OrderPaginatedList, z.ZodTypeDef, unknown>;
    /** @deprecated use `OrderPaginatedList$outboundSchema` instead. */
    const outboundSchema: z.ZodType<OrderPaginatedList$Outbound, z.ZodTypeDef, OrderPaginatedList>;
    /** @deprecated use `OrderPaginatedList$Outbound` instead. */
    type Outbound = OrderPaginatedList$Outbound;
}
export declare function orderPaginatedListToJSON(orderPaginatedList: OrderPaginatedList): string;
export declare function orderPaginatedListFromJSON(jsonString: string): SafeParseResult<OrderPaginatedList, SDKValidationError>;
//# sourceMappingURL=orderpaginatedlist.d.ts.map