"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchShipmentFromJSON = exports.batchShipmentToJSON = exports.BatchShipment$ = exports.BatchShipment$outboundSchema = exports.BatchShipment$inboundSchema = exports.Status$ = exports.Status$outboundSchema = exports.Status$inboundSchema = exports.Status = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.<br>
 *
 * @remarks
 * `VALID` batch shipments can be purchased. <br>
 * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field<br>
 * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
 */
exports.Status = {
    Invalid: "INVALID",
    Valid: "VALID",
    Incomplete: "INCOMPLETE",
    TransactionFailed: "TRANSACTION_FAILED",
};
/** @internal */
exports.Status$inboundSchema = z
    .nativeEnum(exports.Status);
/** @internal */
exports.Status$outboundSchema = exports.Status$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Status$;
(function (Status$) {
    /** @deprecated use `Status$inboundSchema` instead. */
    Status$.inboundSchema = exports.Status$inboundSchema;
    /** @deprecated use `Status$outboundSchema` instead. */
    Status$.outboundSchema = exports.Status$outboundSchema;
})(Status$ || (exports.Status$ = Status$ = {}));
/** @internal */
exports.BatchShipment$inboundSchema = z.object({
    carrier_account: z.string().optional(),
    metadata: z.string().optional(),
    servicelevel_token: z.string().optional(),
    messages: z.array(z.any()).optional(),
    object_id: z.string(),
    shipment: z.string(),
    status: exports.Status$inboundSchema,
    transaction: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "carrier_account": "carrierAccount",
        "servicelevel_token": "servicelevelToken",
        "object_id": "objectId",
    });
});
/** @internal */
exports.BatchShipment$outboundSchema = z.object({
    carrierAccount: z.string().optional(),
    metadata: z.string().optional(),
    servicelevelToken: z.string().optional(),
    messages: z.array(z.any()).optional(),
    objectId: z.string(),
    shipment: z.string(),
    status: exports.Status$outboundSchema,
    transaction: z.string().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        carrierAccount: "carrier_account",
        servicelevelToken: "servicelevel_token",
        objectId: "object_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BatchShipment$;
(function (BatchShipment$) {
    /** @deprecated use `BatchShipment$inboundSchema` instead. */
    BatchShipment$.inboundSchema = exports.BatchShipment$inboundSchema;
    /** @deprecated use `BatchShipment$outboundSchema` instead. */
    BatchShipment$.outboundSchema = exports.BatchShipment$outboundSchema;
})(BatchShipment$ || (exports.BatchShipment$ = BatchShipment$ = {}));
function batchShipmentToJSON(batchShipment) {
    return JSON.stringify(exports.BatchShipment$outboundSchema.parse(batchShipment));
}
exports.batchShipmentToJSON = batchShipmentToJSON;
function batchShipmentFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.BatchShipment$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'BatchShipment' from JSON`);
}
exports.batchShipmentFromJSON = batchShipmentFromJSON;
//# sourceMappingURL=batchshipment.js.map