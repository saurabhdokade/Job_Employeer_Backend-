import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type TracksRequest = {
    /**
     * Name of the carrier of the shipment to track.
     */
    carrier: string;
    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * Tracking number to track.
     */
    trackingNumber: string;
};
/** @internal */
export declare const TracksRequest$inboundSchema: z.ZodType<TracksRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type TracksRequest$Outbound = {
    carrier: string;
    metadata?: string | undefined;
    tracking_number: string;
};
/** @internal */
export declare const TracksRequest$outboundSchema: z.ZodType<TracksRequest$Outbound, z.ZodTypeDef, TracksRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TracksRequest$ {
    /** @deprecated use `TracksRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<TracksRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `TracksRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<TracksRequest$Outbound, z.ZodTypeDef, TracksRequest>;
    /** @deprecated use `TracksRequest$Outbound` instead. */
    type Outbound = TracksRequest$Outbound;
}
export declare function tracksRequestToJSON(tracksRequest: TracksRequest): string;
export declare function tracksRequestFromJSON(jsonString: string): SafeParseResult<TracksRequest, SDKValidationError>;
//# sourceMappingURL=tracksrequest.d.ts.map