"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackingStatusFromJSON = exports.trackingStatusToJSON = exports.TrackingStatus$ = exports.TrackingStatus$outboundSchema = exports.TrackingStatus$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const trackingstatusenum_js_1 = require("./trackingstatusenum.js");
const trackingstatuslocationbase_js_1 = require("./trackingstatuslocationbase.js");
const trackingstatussubstatus_js_1 = require("./trackingstatussubstatus.js");
/** @internal */
exports.TrackingStatus$inboundSchema = z.object({
    location: trackingstatuslocationbase_js_1.TrackingStatusLocationBase$inboundSchema.optional(),
    object_created: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    object_id: z.string(),
    object_updated: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    status: trackingstatusenum_js_1.TrackingStatusEnum$inboundSchema,
    substatus: trackingstatussubstatus_js_1.TrackingStatusSubstatus$inboundSchema.optional(),
    status_date: z.string().datetime({ offset: true }).transform(v => new Date(v))
        .optional(),
    status_details: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "object_created": "objectCreated",
        "object_id": "objectId",
        "object_updated": "objectUpdated",
        "status_date": "statusDate",
        "status_details": "statusDetails",
    });
});
/** @internal */
exports.TrackingStatus$outboundSchema = z.object({
    location: trackingstatuslocationbase_js_1.TrackingStatusLocationBase$outboundSchema.optional(),
    objectCreated: z.date().transform(v => v.toISOString()),
    objectId: z.string(),
    objectUpdated: z.date().transform(v => v.toISOString()),
    status: trackingstatusenum_js_1.TrackingStatusEnum$outboundSchema,
    substatus: trackingstatussubstatus_js_1.TrackingStatusSubstatus$outboundSchema.optional(),
    statusDate: z.date().transform(v => v.toISOString()).optional(),
    statusDetails: z.string(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        objectCreated: "object_created",
        objectId: "object_id",
        objectUpdated: "object_updated",
        statusDate: "status_date",
        statusDetails: "status_details",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var TrackingStatus$;
(function (TrackingStatus$) {
    /** @deprecated use `TrackingStatus$inboundSchema` instead. */
    TrackingStatus$.inboundSchema = exports.TrackingStatus$inboundSchema;
    /** @deprecated use `TrackingStatus$outboundSchema` instead. */
    TrackingStatus$.outboundSchema = exports.TrackingStatus$outboundSchema;
})(TrackingStatus$ || (exports.TrackingStatus$ = TrackingStatus$ = {}));
function trackingStatusToJSON(trackingStatus) {
    return JSON.stringify(exports.TrackingStatus$outboundSchema.parse(trackingStatus));
}
exports.trackingStatusToJSON = trackingStatusToJSON;
function trackingStatusFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.TrackingStatus$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'TrackingStatus' from JSON`);
}
exports.trackingStatusFromJSON = trackingStatusFromJSON;
//# sourceMappingURL=trackingstatus.js.map