import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.<br>
 *
 * @remarks
 * `VALID` batch shipments can be purchased. <br>
 * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field<br>
 * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
 */
export declare const Status: {
    readonly Invalid: "INVALID";
    readonly Valid: "VALID";
    readonly Incomplete: "INCOMPLETE";
    readonly TransactionFailed: "TRANSACTION_FAILED";
};
/**
 * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.<br>
 *
 * @remarks
 * `VALID` batch shipments can be purchased. <br>
 * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field<br>
 * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
 */
export type Status = ClosedEnum<typeof Status>;
export type BatchShipment = {
    /**
     * Object ID of the carrier account to be used for this shipment (will override batch default)
     */
    carrierAccount?: string | undefined;
    /**
     * A string of up to 100 characters that can be filled with any additional information you want
     *
     * @remarks
     * to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * A token that sets the shipping method for the batch, overriding the batch default.
     *
     * @remarks
     * Servicelevel tokens can be found <a href="#tag/Service-Levels">in this list</a>
     * or <a href="#operation/ListCarrierAccounts">at this endpoint</a>.
     */
    servicelevelToken?: string | undefined;
    /**
     * List of Shipment and Transaction error messages.
     */
    messages?: Array<any> | undefined;
    /**
     * Object ID of this batch shipment. Can be used in the remove_shipments endpoint.
     */
    objectId: string;
    /**
     * Object ID of the shipment object created for this batch shipment.
     */
    shipment: string;
    /**
     * `INVALID` batch shipments cannot be purchased and will have to be removed, fixed, and added to the batch again.<br>
     *
     * @remarks
     * `VALID` batch shipments can be purchased. <br>
     * Batch shipments with the status `TRANSACTION_FAILED` were not able to be purchased and the error will be displayed on the message field<br>
     * `INCOMPLETE` batch shipments have an issue with the Address and will need to be removed, fixed, and added to the batch again.
     */
    status: Status;
    /**
     * Object ID of the transaction object created for this batch shipment.
     */
    transaction?: string | undefined;
};
/** @internal */
export declare const Status$inboundSchema: z.ZodNativeEnum<typeof Status>;
/** @internal */
export declare const Status$outboundSchema: z.ZodNativeEnum<typeof Status>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Status$ {
    /** @deprecated use `Status$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Invalid: "INVALID";
        readonly Valid: "VALID";
        readonly Incomplete: "INCOMPLETE";
        readonly TransactionFailed: "TRANSACTION_FAILED";
    }>;
    /** @deprecated use `Status$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Invalid: "INVALID";
        readonly Valid: "VALID";
        readonly Incomplete: "INCOMPLETE";
        readonly TransactionFailed: "TRANSACTION_FAILED";
    }>;
}
/** @internal */
export declare const BatchShipment$inboundSchema: z.ZodType<BatchShipment, z.ZodTypeDef, unknown>;
/** @internal */
export type BatchShipment$Outbound = {
    carrier_account?: string | undefined;
    metadata?: string | undefined;
    servicelevel_token?: string | undefined;
    messages?: Array<any> | undefined;
    object_id: string;
    shipment: string;
    status: string;
    transaction?: string | undefined;
};
/** @internal */
export declare const BatchShipment$outboundSchema: z.ZodType<BatchShipment$Outbound, z.ZodTypeDef, BatchShipment>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace BatchShipment$ {
    /** @deprecated use `BatchShipment$inboundSchema` instead. */
    const inboundSchema: z.ZodType<BatchShipment, z.ZodTypeDef, unknown>;
    /** @deprecated use `BatchShipment$outboundSchema` instead. */
    const outboundSchema: z.ZodType<BatchShipment$Outbound, z.ZodTypeDef, BatchShipment>;
    /** @deprecated use `BatchShipment$Outbound` instead. */
    type Outbound = BatchShipment$Outbound;
}
export declare function batchShipmentToJSON(batchShipment: BatchShipment): string;
export declare function batchShipmentFromJSON(jsonString: string): SafeParseResult<BatchShipment, SDKValidationError>;
//# sourceMappingURL=batchshipment.d.ts.map