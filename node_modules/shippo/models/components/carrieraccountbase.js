"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.carrierAccountBaseFromJSON = exports.carrierAccountBaseToJSON = exports.CarrierAccountBase$ = exports.CarrierAccountBase$outboundSchema = exports.CarrierAccountBase$inboundSchema = exports.carrierAccountBaseParametersFromJSON = exports.carrierAccountBaseParametersToJSON = exports.CarrierAccountBaseParameters$ = exports.CarrierAccountBaseParameters$outboundSchema = exports.CarrierAccountBaseParameters$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const fedexconnectexistingownaccountparameters_js_1 = require("./fedexconnectexistingownaccountparameters.js");
const upsconnectexistingownaccountparameters_js_1 = require("./upsconnectexistingownaccountparameters.js");
/** @internal */
exports.CarrierAccountBaseParameters$inboundSchema = z.union([
    fedexconnectexistingownaccountparameters_js_1.FedExConnectExistingOwnAccountParameters$inboundSchema,
    upsconnectexistingownaccountparameters_js_1.UPSConnectExistingOwnAccountParameters$inboundSchema,
    z.record(z.any()),
]);
/** @internal */
exports.CarrierAccountBaseParameters$outboundSchema = z.union([
    fedexconnectexistingownaccountparameters_js_1.FedExConnectExistingOwnAccountParameters$outboundSchema,
    upsconnectexistingownaccountparameters_js_1.UPSConnectExistingOwnAccountParameters$outboundSchema,
    z.record(z.any()),
]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CarrierAccountBaseParameters$;
(function (CarrierAccountBaseParameters$) {
    /** @deprecated use `CarrierAccountBaseParameters$inboundSchema` instead. */
    CarrierAccountBaseParameters$.inboundSchema = exports.CarrierAccountBaseParameters$inboundSchema;
    /** @deprecated use `CarrierAccountBaseParameters$outboundSchema` instead. */
    CarrierAccountBaseParameters$.outboundSchema = exports.CarrierAccountBaseParameters$outboundSchema;
})(CarrierAccountBaseParameters$ || (exports.CarrierAccountBaseParameters$ = CarrierAccountBaseParameters$ = {}));
function carrierAccountBaseParametersToJSON(carrierAccountBaseParameters) {
    return JSON.stringify(exports.CarrierAccountBaseParameters$outboundSchema.parse(carrierAccountBaseParameters));
}
exports.carrierAccountBaseParametersToJSON = carrierAccountBaseParametersToJSON;
function carrierAccountBaseParametersFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CarrierAccountBaseParameters$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CarrierAccountBaseParameters' from JSON`);
}
exports.carrierAccountBaseParametersFromJSON = carrierAccountBaseParametersFromJSON;
/** @internal */
exports.CarrierAccountBase$inboundSchema = z.object({
    account_id: z.string(),
    active: z.boolean().optional(),
    carrier: z.string(),
    parameters: z.union([
        fedexconnectexistingownaccountparameters_js_1.FedExConnectExistingOwnAccountParameters$inboundSchema,
        upsconnectexistingownaccountparameters_js_1.UPSConnectExistingOwnAccountParameters$inboundSchema,
        z.record(z.any()),
    ]).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "account_id": "accountId",
    });
});
/** @internal */
exports.CarrierAccountBase$outboundSchema = z.object({
    accountId: z.string(),
    active: z.boolean().optional(),
    carrier: z.string(),
    parameters: z.union([
        fedexconnectexistingownaccountparameters_js_1.FedExConnectExistingOwnAccountParameters$outboundSchema,
        upsconnectexistingownaccountparameters_js_1.UPSConnectExistingOwnAccountParameters$outboundSchema,
        z.record(z.any()),
    ]).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        accountId: "account_id",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CarrierAccountBase$;
(function (CarrierAccountBase$) {
    /** @deprecated use `CarrierAccountBase$inboundSchema` instead. */
    CarrierAccountBase$.inboundSchema = exports.CarrierAccountBase$inboundSchema;
    /** @deprecated use `CarrierAccountBase$outboundSchema` instead. */
    CarrierAccountBase$.outboundSchema = exports.CarrierAccountBase$outboundSchema;
})(CarrierAccountBase$ || (exports.CarrierAccountBase$ = CarrierAccountBase$ = {}));
function carrierAccountBaseToJSON(carrierAccountBase) {
    return JSON.stringify(exports.CarrierAccountBase$outboundSchema.parse(carrierAccountBase));
}
exports.carrierAccountBaseToJSON = carrierAccountBaseToJSON;
function carrierAccountBaseFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CarrierAccountBase$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CarrierAccountBase' from JSON`);
}
exports.carrierAccountBaseFromJSON = carrierAccountBaseFromJSON;
//# sourceMappingURL=carrieraccountbase.js.map