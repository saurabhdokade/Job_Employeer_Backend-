import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ResponseMessage, ResponseMessage$Outbound } from "./responsemessage.js";
import { ServiceLevelWithParent, ServiceLevelWithParent$Outbound } from "./servicelevelwithparent.js";
export declare const Attributes: {
    readonly Bestvalue: "BESTVALUE";
    readonly Cheapest: "CHEAPEST";
    readonly Fastest: "FASTEST";
};
export type Attributes = ClosedEnum<typeof Attributes>;
export type Rate = {
    /**
     * Final Rate price, expressed in the currency used in the sender's country.
     */
    amount: string;
    /**
     * Final Rate price, expressed in the currency used in the recipient's country.
     */
    amountLocal: string;
    /**
     * Currency used in the sender's country, refers to `amount`.
     *
     * @remarks
     * The <a href="http://www.xe.com/iso4217.php">official ISO 4217</a> currency codes are used, e.g. `USD` or `EUR`.
     */
    currency: string;
    /**
     * Currency used in the recipient's country, refers to `amount_local`.
     *
     * @remarks
     * The <a href="http://www.xe.com/iso4217.php">official ISO 4217</a> currency codes are used, e.g. `USD` or "EUR".
     */
    currencyLocal: string;
    /**
     * Predicted time the carrier will deliver the package in the destination's local time zone. In the format `HH:MM:SS`.
     */
    arrivesBy?: string | undefined;
    /**
     * An array containing specific attributes of this Rate in context of the entire shipment.
     *
     * @remarks
     * Attributes can be assigned `CHEAPEST`, `FASTEST`, or `BESTVALUE`.
     */
    attributes: Array<Attributes>;
    /**
     * Object ID of the carrier account that has been used to retrieve the rate.
     */
    carrierAccount: string;
    /**
     * Further clarification of the transit times.
     *
     * @remarks
     * Often, this includes notes that the transit time as given in "days" is only an average, not a guaranteed time.
     */
    durationTerms?: string | undefined;
    /**
     * Estimated transit time (duration) in days of the Parcel at the given servicelevel.
     *
     * @remarks
     * Please note that this is not binding, but only an average value as given by the provider.
     * Shippo is not able to guarantee any transit times.
     */
    estimatedDays?: number | undefined;
    /**
     * Cost to the user to insure the Rate for the requested amount of coverage, if insurance coverage was requested.
     *
     * @remarks
     * Expressed in the currency used in the sender's country. Will be null if no insurance coverage was requested, or if insurance is requested from a non-standard insurance provider.
     * Please note this price is already included in the `amount` and `amount_local` fields on the Rate. Do not add this field to them.
     */
    includedInsurancePrice?: string | undefined;
    messages?: Array<ResponseMessage> | undefined;
    /**
     * Date and time of Rate creation.
     */
    objectCreated: Date;
    /**
     * Unique identifier of the given Rate object.
     */
    objectId: string;
    /**
     * Username of the user who created the rate object.
     */
    objectOwner: string;
    /**
     * Carrier offering the rate, e.g., `FedEx` or `Deutsche Post DHL`.
     */
    provider: string;
    /**
     * URL to the provider logo with max. dimensions of 75*75px.
     *
     * @remarks
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    providerImage75?: string | undefined;
    /**
     * URL to the provider logo with max. dimensions of 200*200px.
     *
     * @remarks
     * Please refer to the provider's Logo Usage Guidelines before using the logo.
     */
    providerImage200?: string | undefined;
    servicelevel: ServiceLevelWithParent;
    shipment: string;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
    /**
     * The parcel's transit zone token. These tokens can vary depending on the provider.
     */
    zone?: string | undefined;
};
/** @internal */
export declare const Attributes$inboundSchema: z.ZodNativeEnum<typeof Attributes>;
/** @internal */
export declare const Attributes$outboundSchema: z.ZodNativeEnum<typeof Attributes>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Attributes$ {
    /** @deprecated use `Attributes$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Bestvalue: "BESTVALUE";
        readonly Cheapest: "CHEAPEST";
        readonly Fastest: "FASTEST";
    }>;
    /** @deprecated use `Attributes$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Bestvalue: "BESTVALUE";
        readonly Cheapest: "CHEAPEST";
        readonly Fastest: "FASTEST";
    }>;
}
/** @internal */
export declare const Rate$inboundSchema: z.ZodType<Rate, z.ZodTypeDef, unknown>;
/** @internal */
export type Rate$Outbound = {
    amount: string;
    amount_local: string;
    currency: string;
    currency_local: string;
    arrives_by?: string | undefined;
    attributes: Array<string>;
    carrier_account: string;
    duration_terms?: string | undefined;
    estimated_days?: number | undefined;
    included_insurance_price?: string | undefined;
    messages?: Array<ResponseMessage$Outbound> | undefined;
    object_created: string;
    object_id: string;
    object_owner: string;
    provider: string;
    provider_image_75?: string | undefined;
    provider_image_200?: string | undefined;
    servicelevel: ServiceLevelWithParent$Outbound;
    shipment: string;
    test?: boolean | undefined;
    zone?: string | undefined;
};
/** @internal */
export declare const Rate$outboundSchema: z.ZodType<Rate$Outbound, z.ZodTypeDef, Rate>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Rate$ {
    /** @deprecated use `Rate$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Rate, z.ZodTypeDef, unknown>;
    /** @deprecated use `Rate$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Rate$Outbound, z.ZodTypeDef, Rate>;
    /** @deprecated use `Rate$Outbound` instead. */
    type Outbound = Rate$Outbound;
}
export declare function rateToJSON(rate: Rate): string;
export declare function rateFromJSON(jsonString: string): SafeParseResult<Rate, SDKValidationError>;
//# sourceMappingURL=rate.d.ts.map