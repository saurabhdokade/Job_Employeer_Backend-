import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { ServiceLevelWithParent, ServiceLevelWithParent$Outbound } from "./servicelevelwithparent.js";
import { TrackingStatus, TrackingStatus$Outbound } from "./trackingstatus.js";
import { TrackingStatusLocationBase, TrackingStatusLocationBase$Outbound } from "./trackingstatuslocationbase.js";
export type Track = {
    /**
     * The sender address with city, state, zip and country information.
     */
    addressFrom?: TrackingStatusLocationBase | undefined;
    /**
     * The recipient address with city, state, zip and country information.
     */
    addressTo?: TrackingStatusLocationBase | undefined;
    /**
     * Name of the carrier of the shipment to track. See <a href="#tag/Carriers">Carriers</a>.
     */
    carrier: string;
    /**
     * The estimated time of arrival according to the carrier, this might be updated by carriers during the life of the shipment.
     */
    eta?: Date | undefined;
    messages: Array<string>;
    /**
     * A string of up to 100 characters that can be filled with any additional information you want to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * The estimated time of arrival according to the carrier at the time the shipment first entered the system.
     */
    originalEta?: Date | undefined;
    servicelevel?: ServiceLevelWithParent | undefined;
    /**
     * A list of tracking events, following the same structure as <code>tracking_status</code>.
     *
     * @remarks
     * It contains a full history of all tracking statuses, starting with the earlier tracking event first.
     */
    trackingHistory: Array<TrackingStatus>;
    /**
     * Tracking number to track.
     */
    trackingNumber: string;
    /**
     * The latest tracking information of this shipment.
     */
    trackingStatus?: TrackingStatus | undefined;
    /**
     * The <code>object_id</code> of the transaction associated with this tracking object.
     *
     * @remarks
     * This field is visible only to the object owner of the transaction.
     */
    transaction?: string | undefined;
};
/** @internal */
export declare const Track$inboundSchema: z.ZodType<Track, z.ZodTypeDef, unknown>;
/** @internal */
export type Track$Outbound = {
    address_from?: TrackingStatusLocationBase$Outbound | undefined;
    address_to?: TrackingStatusLocationBase$Outbound | undefined;
    carrier: string;
    eta?: string | undefined;
    messages: Array<string>;
    metadata?: string | undefined;
    original_eta?: string | undefined;
    servicelevel?: ServiceLevelWithParent$Outbound | undefined;
    tracking_history: Array<TrackingStatus$Outbound>;
    tracking_number: string;
    tracking_status?: TrackingStatus$Outbound | undefined;
    transaction?: string | undefined;
};
/** @internal */
export declare const Track$outboundSchema: z.ZodType<Track$Outbound, z.ZodTypeDef, Track>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Track$ {
    /** @deprecated use `Track$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Track, z.ZodTypeDef, unknown>;
    /** @deprecated use `Track$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Track$Outbound, z.ZodTypeDef, Track>;
    /** @deprecated use `Track$Outbound` instead. */
    type Outbound = Track$Outbound;
}
export declare function trackToJSON(track: Track): string;
export declare function trackFromJSON(jsonString: string): SafeParseResult<Track, SDKValidationError>;
//# sourceMappingURL=track.d.ts.map