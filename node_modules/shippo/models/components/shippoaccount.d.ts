import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type ShippoAccount = {
    email: string;
    firstName: string;
    lastName: string;
    companyName?: string | undefined;
    objectCreated?: Date | undefined;
    objectId?: string | undefined;
    objectUpdated?: Date | undefined;
};
/** @internal */
export declare const ShippoAccount$inboundSchema: z.ZodType<ShippoAccount, z.ZodTypeDef, unknown>;
/** @internal */
export type ShippoAccount$Outbound = {
    email: string;
    first_name: string;
    last_name: string;
    company_name?: string | undefined;
    object_created?: string | undefined;
    object_id?: string | undefined;
    object_updated?: string | undefined;
};
/** @internal */
export declare const ShippoAccount$outboundSchema: z.ZodType<ShippoAccount$Outbound, z.ZodTypeDef, ShippoAccount>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ShippoAccount$ {
    /** @deprecated use `ShippoAccount$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ShippoAccount, z.ZodTypeDef, unknown>;
    /** @deprecated use `ShippoAccount$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ShippoAccount$Outbound, z.ZodTypeDef, ShippoAccount>;
    /** @deprecated use `ShippoAccount$Outbound` instead. */
    type Outbound = ShippoAccount$Outbound;
}
export declare function shippoAccountToJSON(shippoAccount: ShippoAccount): string;
export declare function shippoAccountFromJSON(jsonString: string): SafeParseResult<ShippoAccount, SDKValidationError>;
//# sourceMappingURL=shippoaccount.d.ts.map