import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
/**
 * Indicates the status of the Transaction.
 */
export declare const TransactionStatusEnum: {
    readonly Waiting: "WAITING";
    readonly Queued: "QUEUED";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
    readonly Refunded: "REFUNDED";
    readonly Refundpending: "REFUNDPENDING";
    readonly Refundrejected: "REFUNDREJECTED";
};
/**
 * Indicates the status of the Transaction.
 */
export type TransactionStatusEnum = ClosedEnum<typeof TransactionStatusEnum>;
/** @internal */
export declare const TransactionStatusEnum$inboundSchema: z.ZodNativeEnum<typeof TransactionStatusEnum>;
/** @internal */
export declare const TransactionStatusEnum$outboundSchema: z.ZodNativeEnum<typeof TransactionStatusEnum>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace TransactionStatusEnum$ {
    /** @deprecated use `TransactionStatusEnum$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Waiting: "WAITING";
        readonly Queued: "QUEUED";
        readonly Success: "SUCCESS";
        readonly Error: "ERROR";
        readonly Refunded: "REFUNDED";
        readonly Refundpending: "REFUNDPENDING";
        readonly Refundrejected: "REFUNDREJECTED";
    }>;
    /** @deprecated use `TransactionStatusEnum$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Waiting: "WAITING";
        readonly Queued: "QUEUED";
        readonly Success: "SUCCESS";
        readonly Error: "ERROR";
        readonly Refunded: "REFUNDED";
        readonly Refundpending: "REFUNDPENDING";
        readonly Refundrejected: "REFUNDREJECTED";
    }>;
}
//# sourceMappingURL=transactionstatusenum.d.ts.map