import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Track, Track$Outbound } from "./track.js";
import { WebhookEventTypeEnum } from "./webhookeventtypeenum.js";
/**
 * Content of the webhook posted to the external URL
 */
export type WebhookPayloadTrack = {
    /**
     * Type of event that triggered the webhook.
     */
    event?: WebhookEventTypeEnum | undefined;
    /**
     * Determines whether the webhook is a test webhook or not.
     */
    test?: boolean | undefined;
    data?: Track | undefined;
};
/** @internal */
export declare const WebhookPayloadTrack$inboundSchema: z.ZodType<WebhookPayloadTrack, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookPayloadTrack$Outbound = {
    event?: string | undefined;
    test?: boolean | undefined;
    data?: Track$Outbound | undefined;
};
/** @internal */
export declare const WebhookPayloadTrack$outboundSchema: z.ZodType<WebhookPayloadTrack$Outbound, z.ZodTypeDef, WebhookPayloadTrack>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookPayloadTrack$ {
    /** @deprecated use `WebhookPayloadTrack$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookPayloadTrack, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookPayloadTrack$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookPayloadTrack$Outbound, z.ZodTypeDef, WebhookPayloadTrack>;
    /** @deprecated use `WebhookPayloadTrack$Outbound` instead. */
    type Outbound = WebhookPayloadTrack$Outbound;
}
export declare function webhookPayloadTrackToJSON(webhookPayloadTrack: WebhookPayloadTrack): string;
export declare function webhookPayloadTrackFromJSON(jsonString: string): SafeParseResult<WebhookPayloadTrack, SDKValidationError>;
//# sourceMappingURL=webhookpayloadtrack.d.ts.map