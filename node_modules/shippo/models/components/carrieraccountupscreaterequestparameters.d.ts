import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type CarrierAccountUPSCreateRequestParameters = {
    billingAddressCity: string;
    billingAddressCountryIso2: string;
    billingAddressState: string;
    billingAddressStreet1: string;
    /**
     * Empty string acceptable for billing_address_street2
     */
    billingAddressStreet2?: string | undefined;
    billingAddressZip: string;
    /**
     * Company name. Full name is acceptable in this field if the user has no company name
     */
    company?: string | undefined;
    email?: string | undefined;
    fullName?: string | undefined;
    /**
     * Needs to be a valid phone number and cannot be null
     */
    phone?: string | undefined;
    /**
     * User's pickup address city.
     */
    pickupAddressCity: string;
    /**
     * User's pickup street 1.
     */
    pickupAddressCountryIso2: string;
    pickupAddressSameAsBillingAddress?: boolean | undefined;
    /**
     * User's pickup address state.
     */
    pickupAddressState: string;
    /**
     * User's pickup address street 1.
     */
    pickupAddressStreet1: string;
    /**
     * User's pickup street 2.
     */
    pickupAddressStreet2?: string | undefined;
    /**
     * User's pickup address zip code.
     */
    pickupAddressZip: string;
    /**
     * Whether the user agrees to the UPS terms and conditions or not. Error 400 will be returned if passed in as false
     */
    upsAgreements: boolean;
};
/** @internal */
export declare const CarrierAccountUPSCreateRequestParameters$inboundSchema: z.ZodType<CarrierAccountUPSCreateRequestParameters, z.ZodTypeDef, unknown>;
/** @internal */
export type CarrierAccountUPSCreateRequestParameters$Outbound = {
    billing_address_city: string;
    billing_address_country_iso2: string;
    billing_address_state: string;
    billing_address_street1: string;
    billing_address_street2?: string | undefined;
    billing_address_zip: string;
    company?: string | undefined;
    email?: string | undefined;
    full_name?: string | undefined;
    phone?: string | undefined;
    pickup_address_city: string;
    pickup_address_country_iso2: string;
    pickup_address_same_as_billing_address?: boolean | undefined;
    pickup_address_state: string;
    pickup_address_street1: string;
    pickup_address_street2?: string | undefined;
    pickup_address_zip: string;
    ups_agreements: boolean;
};
/** @internal */
export declare const CarrierAccountUPSCreateRequestParameters$outboundSchema: z.ZodType<CarrierAccountUPSCreateRequestParameters$Outbound, z.ZodTypeDef, CarrierAccountUPSCreateRequestParameters>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CarrierAccountUPSCreateRequestParameters$ {
    /** @deprecated use `CarrierAccountUPSCreateRequestParameters$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CarrierAccountUPSCreateRequestParameters, z.ZodTypeDef, unknown>;
    /** @deprecated use `CarrierAccountUPSCreateRequestParameters$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CarrierAccountUPSCreateRequestParameters$Outbound, z.ZodTypeDef, CarrierAccountUPSCreateRequestParameters>;
    /** @deprecated use `CarrierAccountUPSCreateRequestParameters$Outbound` instead. */
    type Outbound = CarrierAccountUPSCreateRequestParameters$Outbound;
}
export declare function carrierAccountUPSCreateRequestParametersToJSON(carrierAccountUPSCreateRequestParameters: CarrierAccountUPSCreateRequestParameters): string;
export declare function carrierAccountUPSCreateRequestParametersFromJSON(jsonString: string): SafeParseResult<CarrierAccountUPSCreateRequestParameters, SDKValidationError>;
//# sourceMappingURL=carrieraccountupscreaterequestparameters.d.ts.map