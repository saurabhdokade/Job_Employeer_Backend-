import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Indicates the status of the Refund.
 */
export declare const RefundStatus: {
    readonly Queued: "QUEUED";
    readonly Pending: "PENDING";
    readonly Success: "SUCCESS";
    readonly Error: "ERROR";
};
/**
 * Indicates the status of the Refund.
 */
export type RefundStatus = ClosedEnum<typeof RefundStatus>;
export type Refund = {
    /**
     * Date and time of object creation.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the given object.
     */
    objectId?: string | undefined;
    /**
     * Username of the user who created the object.
     */
    objectOwner?: string | undefined;
    /**
     * Date and time of last object update.
     */
    objectUpdated?: Date | undefined;
    /**
     * Indicates the status of the Refund.
     */
    status?: RefundStatus | undefined;
    /**
     * Indicates whether the object has been created in test mode.
     */
    test?: boolean | undefined;
    /**
     * Object ID of the Transaction to be refunded.
     */
    transaction?: string | undefined;
};
/** @internal */
export declare const RefundStatus$inboundSchema: z.ZodNativeEnum<typeof RefundStatus>;
/** @internal */
export declare const RefundStatus$outboundSchema: z.ZodNativeEnum<typeof RefundStatus>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RefundStatus$ {
    /** @deprecated use `RefundStatus$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Pending: "PENDING";
        readonly Success: "SUCCESS";
        readonly Error: "ERROR";
    }>;
    /** @deprecated use `RefundStatus$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Queued: "QUEUED";
        readonly Pending: "PENDING";
        readonly Success: "SUCCESS";
        readonly Error: "ERROR";
    }>;
}
/** @internal */
export declare const Refund$inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown>;
/** @internal */
export type Refund$Outbound = {
    object_created?: string | undefined;
    object_id?: string | undefined;
    object_owner?: string | undefined;
    object_updated?: string | undefined;
    status?: string | undefined;
    test?: boolean | undefined;
    transaction?: string | undefined;
};
/** @internal */
export declare const Refund$outboundSchema: z.ZodType<Refund$Outbound, z.ZodTypeDef, Refund>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Refund$ {
    /** @deprecated use `Refund$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Refund, z.ZodTypeDef, unknown>;
    /** @deprecated use `Refund$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Refund$Outbound, z.ZodTypeDef, Refund>;
    /** @deprecated use `Refund$Outbound` instead. */
    type Outbound = Refund$Outbound;
}
export declare function refundToJSON(refund: Refund): string;
export declare function refundFromJSON(jsonString: string): SafeParseResult<Refund, SDKValidationError>;
//# sourceMappingURL=refund.d.ts.map