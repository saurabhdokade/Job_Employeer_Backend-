"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addressFromJSON = exports.addressToJSON = exports.Address$ = exports.Address$outboundSchema = exports.Address$inboundSchema = exports.longitudeFromJSON = exports.longitudeToJSON = exports.Longitude$ = exports.Longitude$outboundSchema = exports.Longitude$inboundSchema = exports.latitudeFromJSON = exports.latitudeToJSON = exports.Latitude$ = exports.Latitude$outboundSchema = exports.Latitude$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const addressvalidationresults_js_1 = require("./addressvalidationresults.js");
/** @internal */
exports.Latitude$inboundSchema = z.union([z.number(), z.string()]);
/** @internal */
exports.Latitude$outboundSchema = z.union([z.number(), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Latitude$;
(function (Latitude$) {
    /** @deprecated use `Latitude$inboundSchema` instead. */
    Latitude$.inboundSchema = exports.Latitude$inboundSchema;
    /** @deprecated use `Latitude$outboundSchema` instead. */
    Latitude$.outboundSchema = exports.Latitude$outboundSchema;
})(Latitude$ || (exports.Latitude$ = Latitude$ = {}));
function latitudeToJSON(latitude) {
    return JSON.stringify(exports.Latitude$outboundSchema.parse(latitude));
}
exports.latitudeToJSON = latitudeToJSON;
function latitudeFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Latitude$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Latitude' from JSON`);
}
exports.latitudeFromJSON = latitudeFromJSON;
/** @internal */
exports.Longitude$inboundSchema = z.union([z.number(), z.string()]);
/** @internal */
exports.Longitude$outboundSchema = z.union([z.number(), z.string()]);
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Longitude$;
(function (Longitude$) {
    /** @deprecated use `Longitude$inboundSchema` instead. */
    Longitude$.inboundSchema = exports.Longitude$inboundSchema;
    /** @deprecated use `Longitude$outboundSchema` instead. */
    Longitude$.outboundSchema = exports.Longitude$outboundSchema;
})(Longitude$ || (exports.Longitude$ = Longitude$ = {}));
function longitudeToJSON(longitude) {
    return JSON.stringify(exports.Longitude$outboundSchema.parse(longitude));
}
exports.longitudeToJSON = longitudeToJSON;
function longitudeFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Longitude$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Longitude' from JSON`);
}
exports.longitudeFromJSON = longitudeFromJSON;
/** @internal */
exports.Address$inboundSchema = z.object({
    name: z.string().optional(),
    company: z.string().optional(),
    street1: z.string().optional(),
    street2: z.string().optional(),
    street3: z.string().optional(),
    street_no: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
    country: z.string(),
    phone: z.string().optional(),
    email: z.string().optional(),
    is_residential: z.boolean().optional(),
    metadata: z.string().optional(),
    is_complete: z.boolean().optional(),
    latitude: z.union([z.number(), z.string()]).optional(),
    longitude: z.union([z.number(), z.string()]).optional(),
    object_created: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    object_id: z.string().optional(),
    object_owner: z.string().optional(),
    object_updated: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    validation_results: addressvalidationresults_js_1.AddressValidationResults$inboundSchema.optional(),
    test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "street_no": "streetNo",
        "is_residential": "isResidential",
        "is_complete": "isComplete",
        "object_created": "objectCreated",
        "object_id": "objectId",
        "object_owner": "objectOwner",
        "object_updated": "objectUpdated",
        "validation_results": "validationResults",
    });
});
/** @internal */
exports.Address$outboundSchema = z.object({
    name: z.string().optional(),
    company: z.string().optional(),
    street1: z.string().optional(),
    street2: z.string().optional(),
    street3: z.string().optional(),
    streetNo: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip: z.string().optional(),
    country: z.string(),
    phone: z.string().optional(),
    email: z.string().optional(),
    isResidential: z.boolean().optional(),
    metadata: z.string().optional(),
    isComplete: z.boolean().optional(),
    latitude: z.union([z.number(), z.string()]).optional(),
    longitude: z.union([z.number(), z.string()]).optional(),
    objectCreated: z.date().transform(v => v.toISOString()).optional(),
    objectId: z.string().optional(),
    objectOwner: z.string().optional(),
    objectUpdated: z.date().transform(v => v.toISOString()).optional(),
    validationResults: addressvalidationresults_js_1.AddressValidationResults$outboundSchema.optional(),
    test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        streetNo: "street_no",
        isResidential: "is_residential",
        isComplete: "is_complete",
        objectCreated: "object_created",
        objectId: "object_id",
        objectOwner: "object_owner",
        objectUpdated: "object_updated",
        validationResults: "validation_results",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Address$;
(function (Address$) {
    /** @deprecated use `Address$inboundSchema` instead. */
    Address$.inboundSchema = exports.Address$inboundSchema;
    /** @deprecated use `Address$outboundSchema` instead. */
    Address$.outboundSchema = exports.Address$outboundSchema;
})(Address$ || (exports.Address$ = Address$ = {}));
function addressToJSON(address) {
    return JSON.stringify(exports.Address$outboundSchema.parse(address));
}
exports.addressToJSON = addressToJSON;
function addressFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Address$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Address' from JSON`);
}
exports.addressFromJSON = addressFromJSON;
//# sourceMappingURL=address.js.map