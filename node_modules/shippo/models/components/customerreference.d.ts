import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Specify the reference field on the label (FedEx and UPS only).
 */
export type CustomerReference = {
    /**
     * Custom prefix for customer reference field (ZPL labels only). Up to 11 characters, including trailing
     *
     * @remarks
     * spaces. Empty string indicates removal of default prefix. To use the default prefix, do not include
     * this property.
     */
    prefix?: string | undefined;
    /**
     * Optional text to be printed on the shipping label for customer reference. Up to 40 characters. If
     *
     * @remarks
     * this is provided, reference_1 will be ignored.
     */
    value?: string | undefined;
    /**
     * Order UPS reference fields are printed on ZPL labels. For UPS shipments, if you choose to set `ref_sort` for one reference, you must set `ref_sort` for all other supported UPS references using unique integers.
     */
    refSort?: number | undefined;
};
/** @internal */
export declare const CustomerReference$inboundSchema: z.ZodType<CustomerReference, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomerReference$Outbound = {
    prefix?: string | undefined;
    value?: string | undefined;
    ref_sort?: number | undefined;
};
/** @internal */
export declare const CustomerReference$outboundSchema: z.ZodType<CustomerReference$Outbound, z.ZodTypeDef, CustomerReference>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomerReference$ {
    /** @deprecated use `CustomerReference$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomerReference, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomerReference$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomerReference$Outbound, z.ZodTypeDef, CustomerReference>;
    /** @deprecated use `CustomerReference$Outbound` instead. */
    type Outbound = CustomerReference$Outbound;
}
export declare function customerReferenceToJSON(customerReference: CustomerReference): string;
export declare function customerReferenceFromJSON(jsonString: string): SafeParseResult<CustomerReference, SDKValidationError>;
//# sourceMappingURL=customerreference.d.ts.map