import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Parcel, Parcel$Outbound } from "./parcel.js";
export type ParcelPaginatedList = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Parcel> | undefined;
};
/** @internal */
export declare const ParcelPaginatedList$inboundSchema: z.ZodType<ParcelPaginatedList, z.ZodTypeDef, unknown>;
/** @internal */
export type ParcelPaginatedList$Outbound = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Parcel$Outbound> | undefined;
};
/** @internal */
export declare const ParcelPaginatedList$outboundSchema: z.ZodType<ParcelPaginatedList$Outbound, z.ZodTypeDef, ParcelPaginatedList>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ParcelPaginatedList$ {
    /** @deprecated use `ParcelPaginatedList$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ParcelPaginatedList, z.ZodTypeDef, unknown>;
    /** @deprecated use `ParcelPaginatedList$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ParcelPaginatedList$Outbound, z.ZodTypeDef, ParcelPaginatedList>;
    /** @deprecated use `ParcelPaginatedList$Outbound` instead. */
    type Outbound = ParcelPaginatedList$Outbound;
}
export declare function parcelPaginatedListToJSON(parcelPaginatedList: ParcelPaginatedList): string;
export declare function parcelPaginatedListFromJSON(jsonString: string): SafeParseResult<ParcelPaginatedList, SDKValidationError>;
//# sourceMappingURL=parcelpaginatedlist.d.ts.map