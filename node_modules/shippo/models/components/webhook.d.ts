import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
export type Webhook = {
    /**
     * Type of event that triggers the webhook.
     */
    event: string;
    /**
     * URL webhook events are sent to.
     */
    url: string;
    /**
     * Determines whether the webhook is active or not.
     */
    active?: boolean | undefined;
    /**
     * Determines whether the webhook is a test webhook or not.
     */
    isTest?: boolean | undefined;
    /**
     * Timestamp of the creation of the webhook.
     */
    objectCreated?: Date | undefined;
    /**
     * Unique identifier of the webhook. This can be used to retrieve or delete the webhook.
     */
    objectId?: string | undefined;
    /**
     * Timestamp of the last update of the webhook.
     */
    objectUpdated?: Date | undefined;
    /**
     * Username of the user who created the webhook.
     */
    objectOwner?: string | undefined;
};
/** @internal */
export declare const Webhook$inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown>;
/** @internal */
export type Webhook$Outbound = {
    event: string;
    url: string;
    active?: boolean | undefined;
    is_test?: boolean | undefined;
    object_created?: string | undefined;
    object_id?: string | undefined;
    object_updated?: string | undefined;
    object_owner?: string | undefined;
};
/** @internal */
export declare const Webhook$outboundSchema: z.ZodType<Webhook$Outbound, z.ZodTypeDef, Webhook>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Webhook$ {
    /** @deprecated use `Webhook$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Webhook, z.ZodTypeDef, unknown>;
    /** @deprecated use `Webhook$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Webhook$Outbound, z.ZodTypeDef, Webhook>;
    /** @deprecated use `Webhook$Outbound` instead. */
    type Outbound = Webhook$Outbound;
}
export declare function webhookToJSON(webhook: Webhook): string;
export declare function webhookFromJSON(jsonString: string): SafeParseResult<Webhook, SDKValidationError>;
//# sourceMappingURL=webhook.d.ts.map