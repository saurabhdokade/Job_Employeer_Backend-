import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Refund, Refund$Outbound } from "./refund.js";
export type RefundPaginatedList = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Refund> | undefined;
};
/** @internal */
export declare const RefundPaginatedList$inboundSchema: z.ZodType<RefundPaginatedList, z.ZodTypeDef, unknown>;
/** @internal */
export type RefundPaginatedList$Outbound = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Refund$Outbound> | undefined;
};
/** @internal */
export declare const RefundPaginatedList$outboundSchema: z.ZodType<RefundPaginatedList$Outbound, z.ZodTypeDef, RefundPaginatedList>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RefundPaginatedList$ {
    /** @deprecated use `RefundPaginatedList$inboundSchema` instead. */
    const inboundSchema: z.ZodType<RefundPaginatedList, z.ZodTypeDef, unknown>;
    /** @deprecated use `RefundPaginatedList$outboundSchema` instead. */
    const outboundSchema: z.ZodType<RefundPaginatedList$Outbound, z.ZodTypeDef, RefundPaginatedList>;
    /** @deprecated use `RefundPaginatedList$Outbound` instead. */
    type Outbound = RefundPaginatedList$Outbound;
}
export declare function refundPaginatedListToJSON(refundPaginatedList: RefundPaginatedList): string;
export declare function refundPaginatedListFromJSON(jsonString: string): SafeParseResult<RefundPaginatedList, SDKValidationError>;
//# sourceMappingURL=refundpaginatedlist.d.ts.map