import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Mandatory for Fedex only. License type of the recipient of the Alcohol Package.
 */
export declare const RecipientType: {
    readonly Licensee: "licensee";
    readonly Consumer: "consumer";
};
/**
 * Mandatory for Fedex only. License type of the recipient of the Alcohol Package.
 */
export type RecipientType = ClosedEnum<typeof RecipientType>;
/**
 * Indicates that a shipment contains Alcohol (Fedex and UPS only).
 */
export type Alcohol = {
    /**
     * Mandatory for Fedex and UPS. Specifies that the package contains Alcohol.
     */
    containsAlcohol?: boolean | undefined;
    /**
     * Mandatory for Fedex only. License type of the recipient of the Alcohol Package.
     */
    recipientType?: RecipientType | undefined;
};
/** @internal */
export declare const RecipientType$inboundSchema: z.ZodNativeEnum<typeof RecipientType>;
/** @internal */
export declare const RecipientType$outboundSchema: z.ZodNativeEnum<typeof RecipientType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace RecipientType$ {
    /** @deprecated use `RecipientType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Licensee: "licensee";
        readonly Consumer: "consumer";
    }>;
    /** @deprecated use `RecipientType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Licensee: "licensee";
        readonly Consumer: "consumer";
    }>;
}
/** @internal */
export declare const Alcohol$inboundSchema: z.ZodType<Alcohol, z.ZodTypeDef, unknown>;
/** @internal */
export type Alcohol$Outbound = {
    contains_alcohol?: boolean | undefined;
    recipient_type?: string | undefined;
};
/** @internal */
export declare const Alcohol$outboundSchema: z.ZodType<Alcohol$Outbound, z.ZodTypeDef, Alcohol>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Alcohol$ {
    /** @deprecated use `Alcohol$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Alcohol, z.ZodTypeDef, unknown>;
    /** @deprecated use `Alcohol$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Alcohol$Outbound, z.ZodTypeDef, Alcohol>;
    /** @deprecated use `Alcohol$Outbound` instead. */
    type Outbound = Alcohol$Outbound;
}
export declare function alcoholToJSON(alcohol: Alcohol): string;
export declare function alcoholFromJSON(jsonString: string): SafeParseResult<Alcohol, SDKValidationError>;
//# sourceMappingURL=alcohol.d.ts.map