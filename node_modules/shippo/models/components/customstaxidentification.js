"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customsTaxIdentificationFromJSON = exports.customsTaxIdentificationToJSON = exports.CustomsTaxIdentification$ = exports.CustomsTaxIdentification$outboundSchema = exports.CustomsTaxIdentification$inboundSchema = exports.CustomsTaxIdentificationType$ = exports.CustomsTaxIdentificationType$outboundSchema = exports.CustomsTaxIdentificationType$inboundSchema = exports.CustomsTaxIdentificationType = void 0;
const z = __importStar(require("zod"));
const schemas_js_1 = require("../../lib/schemas.js");
/**
 * Type of tax identification.
 *
 * @remarks
 * * `EIN` - Employer Identification Number, also known as a Federal Tax Identification Number.
 * * `VAT` - Value Added Tax identification number.
 * * `IOSS` - Import One-Stop Shop
 * * `ARN` - Australian Taxation Office Reference Number
 */
exports.CustomsTaxIdentificationType = {
    Ein: "EIN",
    Vat: "VAT",
    Ioss: "IOSS",
    Arn: "ARN",
};
/** @internal */
exports.CustomsTaxIdentificationType$inboundSchema = z.nativeEnum(exports.CustomsTaxIdentificationType);
/** @internal */
exports.CustomsTaxIdentificationType$outboundSchema = exports.CustomsTaxIdentificationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsTaxIdentificationType$;
(function (CustomsTaxIdentificationType$) {
    /** @deprecated use `CustomsTaxIdentificationType$inboundSchema` instead. */
    CustomsTaxIdentificationType$.inboundSchema = exports.CustomsTaxIdentificationType$inboundSchema;
    /** @deprecated use `CustomsTaxIdentificationType$outboundSchema` instead. */
    CustomsTaxIdentificationType$.outboundSchema = exports.CustomsTaxIdentificationType$outboundSchema;
})(CustomsTaxIdentificationType$ || (exports.CustomsTaxIdentificationType$ = CustomsTaxIdentificationType$ = {}));
/** @internal */
exports.CustomsTaxIdentification$inboundSchema = z.object({
    number: z.string().optional(),
    type: exports.CustomsTaxIdentificationType$inboundSchema.optional(),
});
/** @internal */
exports.CustomsTaxIdentification$outboundSchema = z.object({
    number: z.string().optional(),
    type: exports.CustomsTaxIdentificationType$outboundSchema.optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsTaxIdentification$;
(function (CustomsTaxIdentification$) {
    /** @deprecated use `CustomsTaxIdentification$inboundSchema` instead. */
    CustomsTaxIdentification$.inboundSchema = exports.CustomsTaxIdentification$inboundSchema;
    /** @deprecated use `CustomsTaxIdentification$outboundSchema` instead. */
    CustomsTaxIdentification$.outboundSchema = exports.CustomsTaxIdentification$outboundSchema;
})(CustomsTaxIdentification$ || (exports.CustomsTaxIdentification$ = CustomsTaxIdentification$ = {}));
function customsTaxIdentificationToJSON(customsTaxIdentification) {
    return JSON.stringify(exports.CustomsTaxIdentification$outboundSchema.parse(customsTaxIdentification));
}
exports.customsTaxIdentificationToJSON = customsTaxIdentificationToJSON;
function customsTaxIdentificationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomsTaxIdentification$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomsTaxIdentification' from JSON`);
}
exports.customsTaxIdentificationFromJSON = customsTaxIdentificationFromJSON;
//# sourceMappingURL=customstaxidentification.js.map