import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Secured funds include money orders, certified cheques and others (see
 *
 * @remarks
 * <a href="https://www.ups.com/content/us/en/shipping/time/service/value_added/cod.html">UPS</a> for details).
 * If no payment_method inputted the value defaults to "ANY".)
 */
export declare const PaymentMethod: {
    readonly SecuredFunds: "SECURED_FUNDS";
    readonly Cash: "CASH";
    readonly Any: "ANY";
};
/**
 * Secured funds include money orders, certified cheques and others (see
 *
 * @remarks
 * <a href="https://www.ups.com/content/us/en/shipping/time/service/value_added/cod.html">UPS</a> for details).
 * If no payment_method inputted the value defaults to "ANY".)
 */
export type PaymentMethod = ClosedEnum<typeof PaymentMethod>;
/**
 * Specify collection on delivery details (UPS only).
 */
export type Cod = {
    /**
     * Amount to be collected.
     */
    amount?: string | undefined;
    /**
     * Currency for the amount to be collected. Currently only USD is supported for UPS.
     */
    currency?: string | undefined;
    /**
     * Secured funds include money orders, certified cheques and others (see
     *
     * @remarks
     * <a href="https://www.ups.com/content/us/en/shipping/time/service/value_added/cod.html">UPS</a> for details).
     * If no payment_method inputted the value defaults to "ANY".)
     */
    paymentMethod?: PaymentMethod | undefined;
};
/** @internal */
export declare const PaymentMethod$inboundSchema: z.ZodNativeEnum<typeof PaymentMethod>;
/** @internal */
export declare const PaymentMethod$outboundSchema: z.ZodNativeEnum<typeof PaymentMethod>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace PaymentMethod$ {
    /** @deprecated use `PaymentMethod$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly SecuredFunds: "SECURED_FUNDS";
        readonly Cash: "CASH";
        readonly Any: "ANY";
    }>;
    /** @deprecated use `PaymentMethod$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly SecuredFunds: "SECURED_FUNDS";
        readonly Cash: "CASH";
        readonly Any: "ANY";
    }>;
}
/** @internal */
export declare const Cod$inboundSchema: z.ZodType<Cod, z.ZodTypeDef, unknown>;
/** @internal */
export type Cod$Outbound = {
    amount?: string | undefined;
    currency?: string | undefined;
    payment_method?: string | undefined;
};
/** @internal */
export declare const Cod$outboundSchema: z.ZodType<Cod$Outbound, z.ZodTypeDef, Cod>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Cod$ {
    /** @deprecated use `Cod$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Cod, z.ZodTypeDef, unknown>;
    /** @deprecated use `Cod$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Cod$Outbound, z.ZodTypeDef, Cod>;
    /** @deprecated use `Cod$Outbound` instead. */
    type Outbound = Cod$Outbound;
}
export declare function codToJSON(cod: Cod): string;
export declare function codFromJSON(jsonString: string): SafeParseResult<Cod, SDKValidationError>;
//# sourceMappingURL=cod.d.ts.map