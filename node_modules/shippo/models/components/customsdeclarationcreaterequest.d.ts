import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { AddressImporter, AddressImporter$Outbound } from "./addressimporter.js";
import { CustomsDeclarationB13AFilingOptionEnum } from "./customsdeclarationb13afilingoptionenum.js";
import { CustomsDeclarationContentsTypeEnum } from "./customsdeclarationcontentstypeenum.js";
import { CustomsDeclarationEelPfcEnum } from "./customsdeclarationeelpfcenum.js";
import { CustomsDeclarationIncotermEnum } from "./customsdeclarationincotermenum.js";
import { CustomsDeclarationNonDeliveryOptionEnum } from "./customsdeclarationnondeliveryoptionenum.js";
import { CustomsExporterIdentification, CustomsExporterIdentification$Outbound } from "./customsexporteridentification.js";
import { CustomsItemCreateRequest, CustomsItemCreateRequest$Outbound } from "./customsitemcreaterequest.js";
/**
 * Party to be billed for duties.
 */
export declare const CustomsDeclarationCreateRequestType: {
    readonly Sender: "SENDER";
    readonly Recipient: "RECIPIENT";
    readonly ThirdParty: "THIRD_PARTY";
};
/**
 * Party to be billed for duties.
 */
export type CustomsDeclarationCreateRequestType = ClosedEnum<typeof CustomsDeclarationCreateRequestType>;
export type CustomsDeclarationCreateRequestAddress = {
    /**
     * Name of the party to be billed for duties.
     */
    name?: string | undefined;
    /**
     * Postal code of the party to be billed for duties.
     */
    zip?: string | undefined;
    /**
     * Country ISO code of account number to be billed.
     */
    country?: string | undefined;
};
/**
 * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
 */
export type DutiesPayor = {
    /**
     * Account number to be billed for duties.
     */
    account?: string | undefined;
    /**
     * Party to be billed for duties.
     */
    type?: CustomsDeclarationCreateRequestType | undefined;
    address?: CustomsDeclarationCreateRequestAddress | undefined;
};
export type CustomsDeclarationCreateRequest = {
    /**
     * **required if eel_pfc is `AES_ITN`**<br>
     *
     * @remarks
     * AES / ITN reference of the shipment.
     */
    aesItn?: string | undefined;
    b13aFilingOption?: CustomsDeclarationB13AFilingOptionEnum | undefined;
    /**
     * **must be provided if and only if b13a_filing_option is provided**<br>
     *
     * @remarks
     * Represents:<br> the Proof of Report (POR) Number when b13a_filing_option is `FILED_ELECTRONICALLY`;<br>
     * the Summary ID Number when b13a_filing_option is `SUMMARY_REPORTING`;<br>
     * or the Exemption Number when b13a_filing_option is `NOT_REQUIRED`.
     */
    b13aNumber?: string | undefined;
    /**
     * Certificate reference of the shipment.
     */
    certificate?: string | undefined;
    /**
     * Expresses that the certify_signer has provided all information of this customs declaration truthfully.
     */
    certify: boolean;
    /**
     * Name of the person who created the customs declaration and is responsible for the validity of all
     *
     * @remarks
     * information provided.
     */
    certifySigner: string;
    commercialInvoice?: boolean | undefined;
    /**
     * **required if contents_type is `OTHER`**<br>
     *
     * @remarks
     * Explanation of the type of goods of the shipment.
     */
    contentsExplanation?: string | undefined;
    /**
     * Disclaimer for the shipment and customs information that have been provided.
     */
    disclaimer?: string | undefined;
    /**
     * Specifies who will pay the duties for the shipment. Only accepted for FedEx shipments.
     */
    dutiesPayor?: DutiesPayor | undefined;
    /**
     * Additional exporter identification that may be required to ship in certain countries
     */
    exporterIdentification?: CustomsExporterIdentification | undefined;
    /**
     * Exporter reference of an export shipment.
     */
    exporterReference?: string | undefined;
    /**
     * Importer reference of an import shipment.
     */
    importerReference?: string | undefined;
    /**
     * Indicates whether the shipment's destination VAT has been collected. May be required for some destinations.
     */
    isVatCollected?: boolean | undefined;
    /**
     * Invoice reference of the shipment.
     */
    invoice?: string | undefined;
    /**
     * License reference of the shipment.
     */
    license?: string | undefined;
    /**
     * A string of up to 100 characters that can be filled with any additional information you
     *
     * @remarks
     * want to attach to the object.
     */
    metadata?: string | undefined;
    /**
     * Additional notes to be included in the customs declaration.
     */
    notes?: string | undefined;
    /**
     * Object that represents the address of the importer
     */
    addressImporter?: AddressImporter | undefined;
    contentsType: CustomsDeclarationContentsTypeEnum;
    eelPfc?: CustomsDeclarationEelPfcEnum | undefined;
    incoterm?: CustomsDeclarationIncotermEnum | undefined;
    items: Array<CustomsItemCreateRequest>;
    nonDeliveryOption: CustomsDeclarationNonDeliveryOptionEnum;
    test?: boolean | undefined;
};
/** @internal */
export declare const CustomsDeclarationCreateRequestType$inboundSchema: z.ZodNativeEnum<typeof CustomsDeclarationCreateRequestType>;
/** @internal */
export declare const CustomsDeclarationCreateRequestType$outboundSchema: z.ZodNativeEnum<typeof CustomsDeclarationCreateRequestType>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomsDeclarationCreateRequestType$ {
    /** @deprecated use `CustomsDeclarationCreateRequestType$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Sender: "SENDER";
        readonly Recipient: "RECIPIENT";
        readonly ThirdParty: "THIRD_PARTY";
    }>;
    /** @deprecated use `CustomsDeclarationCreateRequestType$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Sender: "SENDER";
        readonly Recipient: "RECIPIENT";
        readonly ThirdParty: "THIRD_PARTY";
    }>;
}
/** @internal */
export declare const CustomsDeclarationCreateRequestAddress$inboundSchema: z.ZodType<CustomsDeclarationCreateRequestAddress, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomsDeclarationCreateRequestAddress$Outbound = {
    name?: string | undefined;
    zip?: string | undefined;
    country?: string | undefined;
};
/** @internal */
export declare const CustomsDeclarationCreateRequestAddress$outboundSchema: z.ZodType<CustomsDeclarationCreateRequestAddress$Outbound, z.ZodTypeDef, CustomsDeclarationCreateRequestAddress>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomsDeclarationCreateRequestAddress$ {
    /** @deprecated use `CustomsDeclarationCreateRequestAddress$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomsDeclarationCreateRequestAddress, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomsDeclarationCreateRequestAddress$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomsDeclarationCreateRequestAddress$Outbound, z.ZodTypeDef, CustomsDeclarationCreateRequestAddress>;
    /** @deprecated use `CustomsDeclarationCreateRequestAddress$Outbound` instead. */
    type Outbound = CustomsDeclarationCreateRequestAddress$Outbound;
}
export declare function customsDeclarationCreateRequestAddressToJSON(customsDeclarationCreateRequestAddress: CustomsDeclarationCreateRequestAddress): string;
export declare function customsDeclarationCreateRequestAddressFromJSON(jsonString: string): SafeParseResult<CustomsDeclarationCreateRequestAddress, SDKValidationError>;
/** @internal */
export declare const DutiesPayor$inboundSchema: z.ZodType<DutiesPayor, z.ZodTypeDef, unknown>;
/** @internal */
export type DutiesPayor$Outbound = {
    account?: string | undefined;
    type?: string | undefined;
    address?: CustomsDeclarationCreateRequestAddress$Outbound | undefined;
};
/** @internal */
export declare const DutiesPayor$outboundSchema: z.ZodType<DutiesPayor$Outbound, z.ZodTypeDef, DutiesPayor>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace DutiesPayor$ {
    /** @deprecated use `DutiesPayor$inboundSchema` instead. */
    const inboundSchema: z.ZodType<DutiesPayor, z.ZodTypeDef, unknown>;
    /** @deprecated use `DutiesPayor$outboundSchema` instead. */
    const outboundSchema: z.ZodType<DutiesPayor$Outbound, z.ZodTypeDef, DutiesPayor>;
    /** @deprecated use `DutiesPayor$Outbound` instead. */
    type Outbound = DutiesPayor$Outbound;
}
export declare function dutiesPayorToJSON(dutiesPayor: DutiesPayor): string;
export declare function dutiesPayorFromJSON(jsonString: string): SafeParseResult<DutiesPayor, SDKValidationError>;
/** @internal */
export declare const CustomsDeclarationCreateRequest$inboundSchema: z.ZodType<CustomsDeclarationCreateRequest, z.ZodTypeDef, unknown>;
/** @internal */
export type CustomsDeclarationCreateRequest$Outbound = {
    aes_itn?: string | undefined;
    b13a_filing_option?: string | undefined;
    b13a_number?: string | undefined;
    certificate?: string | undefined;
    certify: boolean;
    certify_signer: string;
    commercial_invoice?: boolean | undefined;
    contents_explanation?: string | undefined;
    disclaimer?: string | undefined;
    duties_payor?: DutiesPayor$Outbound | undefined;
    exporter_identification?: CustomsExporterIdentification$Outbound | undefined;
    exporter_reference?: string | undefined;
    importer_reference?: string | undefined;
    is_vat_collected?: boolean | undefined;
    invoice?: string | undefined;
    license?: string | undefined;
    metadata?: string | undefined;
    notes?: string | undefined;
    address_importer?: AddressImporter$Outbound | undefined;
    contents_type: string;
    eel_pfc?: string | undefined;
    incoterm?: string | undefined;
    items: Array<CustomsItemCreateRequest$Outbound>;
    non_delivery_option: string;
    test?: boolean | undefined;
};
/** @internal */
export declare const CustomsDeclarationCreateRequest$outboundSchema: z.ZodType<CustomsDeclarationCreateRequest$Outbound, z.ZodTypeDef, CustomsDeclarationCreateRequest>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace CustomsDeclarationCreateRequest$ {
    /** @deprecated use `CustomsDeclarationCreateRequest$inboundSchema` instead. */
    const inboundSchema: z.ZodType<CustomsDeclarationCreateRequest, z.ZodTypeDef, unknown>;
    /** @deprecated use `CustomsDeclarationCreateRequest$outboundSchema` instead. */
    const outboundSchema: z.ZodType<CustomsDeclarationCreateRequest$Outbound, z.ZodTypeDef, CustomsDeclarationCreateRequest>;
    /** @deprecated use `CustomsDeclarationCreateRequest$Outbound` instead. */
    type Outbound = CustomsDeclarationCreateRequest$Outbound;
}
export declare function customsDeclarationCreateRequestToJSON(customsDeclarationCreateRequest: CustomsDeclarationCreateRequest): string;
export declare function customsDeclarationCreateRequestFromJSON(jsonString: string): SafeParseResult<CustomsDeclarationCreateRequest, SDKValidationError>;
//# sourceMappingURL=customsdeclarationcreaterequest.d.ts.map