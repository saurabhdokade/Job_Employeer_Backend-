import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Webhook, Webhook$Outbound } from "./webhook.js";
export type WebhookPaginatedList = {
    next?: string | undefined;
    previous?: string | undefined;
    count?: number | undefined;
    results?: Array<Webhook> | undefined;
};
/** @internal */
export declare const WebhookPaginatedList$inboundSchema: z.ZodType<WebhookPaginatedList, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookPaginatedList$Outbound = {
    next?: string | undefined;
    previous?: string | undefined;
    count?: number | undefined;
    results?: Array<Webhook$Outbound> | undefined;
};
/** @internal */
export declare const WebhookPaginatedList$outboundSchema: z.ZodType<WebhookPaginatedList$Outbound, z.ZodTypeDef, WebhookPaginatedList>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookPaginatedList$ {
    /** @deprecated use `WebhookPaginatedList$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookPaginatedList, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookPaginatedList$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookPaginatedList$Outbound, z.ZodTypeDef, WebhookPaginatedList>;
    /** @deprecated use `WebhookPaginatedList$Outbound` instead. */
    type Outbound = WebhookPaginatedList$Outbound;
}
export declare function webhookPaginatedListToJSON(webhookPaginatedList: WebhookPaginatedList): string;
export declare function webhookPaginatedListFromJSON(jsonString: string): SafeParseResult<WebhookPaginatedList, SDKValidationError>;
//# sourceMappingURL=webhookpaginatedlist.d.ts.map