import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * Party to be billed. (Leave blank for DHL Germany.)
 */
export declare const Type: {
    readonly Sender: "SENDER";
    readonly Recipient: "RECIPIENT";
    readonly ThirdParty: "THIRD_PARTY";
    readonly ThirdPartyConsignee: "THIRD_PARTY_CONSIGNEE";
    readonly Collect: "COLLECT";
};
/**
 * Party to be billed. (Leave blank for DHL Germany.)
 */
export type Type = ClosedEnum<typeof Type>;
/**
 * Specify billing details (UPS, FedEx, and DHL Germany only).
 */
export type Billing = {
    /**
     * Account number to be billed. (For DHL Germany, leave this field blank.)
     */
    account?: string | undefined;
    /**
     * Country iso2 code of account number to be billed (required for UPS third party billing only).
     */
    country?: string | undefined;
    /**
     * 2 digit code used to override your default participation code associated with your DHL Germany account.
     */
    participationCode?: string | undefined;
    /**
     * Party to be billed. (Leave blank for DHL Germany.)
     */
    type?: Type | undefined;
    /**
     * ZIP code of account number to be billed (required for UPS if there is a zip on the billing account).
     */
    zip?: string | undefined;
};
/** @internal */
export declare const Type$inboundSchema: z.ZodNativeEnum<typeof Type>;
/** @internal */
export declare const Type$outboundSchema: z.ZodNativeEnum<typeof Type>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Sender: "SENDER";
        readonly Recipient: "RECIPIENT";
        readonly ThirdParty: "THIRD_PARTY";
        readonly ThirdPartyConsignee: "THIRD_PARTY_CONSIGNEE";
        readonly Collect: "COLLECT";
    }>;
    /** @deprecated use `Type$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Sender: "SENDER";
        readonly Recipient: "RECIPIENT";
        readonly ThirdParty: "THIRD_PARTY";
        readonly ThirdPartyConsignee: "THIRD_PARTY_CONSIGNEE";
        readonly Collect: "COLLECT";
    }>;
}
/** @internal */
export declare const Billing$inboundSchema: z.ZodType<Billing, z.ZodTypeDef, unknown>;
/** @internal */
export type Billing$Outbound = {
    account?: string | undefined;
    country?: string | undefined;
    participation_code?: string | undefined;
    type?: string | undefined;
    zip?: string | undefined;
};
/** @internal */
export declare const Billing$outboundSchema: z.ZodType<Billing$Outbound, z.ZodTypeDef, Billing>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Billing$ {
    /** @deprecated use `Billing$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Billing, z.ZodTypeDef, unknown>;
    /** @deprecated use `Billing$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Billing$Outbound, z.ZodTypeDef, Billing>;
    /** @deprecated use `Billing$Outbound` instead. */
    type Outbound = Billing$Outbound;
}
export declare function billingToJSON(billing: Billing): string;
export declare function billingFromJSON(jsonString: string): SafeParseResult<Billing, SDKValidationError>;
//# sourceMappingURL=billing.d.ts.map