import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set provider to `FEDEX`, `UPS`, or `ONTRAC`.
 */
export declare const ParcelInsuranceProvider: {
    readonly Fedex: "FEDEX";
    readonly Ups: "UPS";
    readonly Ontrac: "ONTRAC";
};
/**
 * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set provider to `FEDEX`, `UPS`, or `ONTRAC`.
 */
export type ParcelInsuranceProvider = ClosedEnum<typeof ParcelInsuranceProvider>;
/**
 * To add insurace to your parcel, specify `amount`, `content` and `currency`. <br><br>If you do not want to add insurance to you parcel, do not set these parameters.
 */
export type ParcelInsurance = {
    /**
     * Declared value of the goods you want to insure.
     */
    amount?: string | undefined;
    /**
     * Description of parcel content.
     */
    content?: string | undefined;
    /**
     * Currency for the amount value. Currently only USD is supported for FedEx and UPS.
     */
    currency?: string | undefined;
    /**
     * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set provider to `FEDEX`, `UPS`, or `ONTRAC`.
     */
    provider?: ParcelInsuranceProvider | undefined;
};
/** @internal */
export declare const ParcelInsuranceProvider$inboundSchema: z.ZodNativeEnum<typeof ParcelInsuranceProvider>;
/** @internal */
export declare const ParcelInsuranceProvider$outboundSchema: z.ZodNativeEnum<typeof ParcelInsuranceProvider>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ParcelInsuranceProvider$ {
    /** @deprecated use `ParcelInsuranceProvider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Fedex: "FEDEX";
        readonly Ups: "UPS";
        readonly Ontrac: "ONTRAC";
    }>;
    /** @deprecated use `ParcelInsuranceProvider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Fedex: "FEDEX";
        readonly Ups: "UPS";
        readonly Ontrac: "ONTRAC";
    }>;
}
/** @internal */
export declare const ParcelInsurance$inboundSchema: z.ZodType<ParcelInsurance, z.ZodTypeDef, unknown>;
/** @internal */
export type ParcelInsurance$Outbound = {
    amount?: string | undefined;
    content?: string | undefined;
    currency?: string | undefined;
    provider?: string | undefined;
};
/** @internal */
export declare const ParcelInsurance$outboundSchema: z.ZodType<ParcelInsurance$Outbound, z.ZodTypeDef, ParcelInsurance>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace ParcelInsurance$ {
    /** @deprecated use `ParcelInsurance$inboundSchema` instead. */
    const inboundSchema: z.ZodType<ParcelInsurance, z.ZodTypeDef, unknown>;
    /** @deprecated use `ParcelInsurance$outboundSchema` instead. */
    const outboundSchema: z.ZodType<ParcelInsurance$Outbound, z.ZodTypeDef, ParcelInsurance>;
    /** @deprecated use `ParcelInsurance$Outbound` instead. */
    type Outbound = ParcelInsurance$Outbound;
}
export declare function parcelInsuranceToJSON(parcelInsurance: ParcelInsurance): string;
export declare function parcelInsuranceFromJSON(jsonString: string): SafeParseResult<ParcelInsurance, SDKValidationError>;
//# sourceMappingURL=parcelinsurance.d.ts.map