"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.batchFromJSON = exports.batchToJSON = exports.Batch$ = exports.Batch$outboundSchema = exports.Batch$inboundSchema = exports.BatchStatus$ = exports.BatchStatus$outboundSchema = exports.BatchStatus$inboundSchema = exports.objectResultsFromJSON = exports.objectResultsToJSON = exports.ObjectResults$ = exports.ObjectResults$outboundSchema = exports.ObjectResults$inboundSchema = exports.BatchStatus = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const batchshipmentpaginatedlist_js_1 = require("./batchshipmentpaginatedlist.js");
const labelfiletypeenum_js_1 = require("./labelfiletypeenum.js");
/**
 * Batches that are `VALIDATING` are being created and validated<br>
 *
 * @remarks
 * `VALID` batches can be purchased<br>
 * `INVALID` batches cannot be purchased, `INVALID` BatchShipments must be removed<br>
 * Batches that are in the `PURCHASING` state are being purchased<br>
 * `PURCHASED` batches are finished purchasing.
 */
exports.BatchStatus = {
    Validating: "VALIDATING",
    Valid: "VALID",
    Invalid: "INVALID",
    Purchasing: "PURCHASING",
    Purchased: "PURCHASED",
};
/** @internal */
exports.ObjectResults$inboundSchema = z.object({
    creation_failed: z.number().int(),
    creation_succeeded: z.number().int(),
    purchase_failed: z.number().int(),
    purchase_succeeded: z.number().int(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "creation_failed": "creationFailed",
        "creation_succeeded": "creationSucceeded",
        "purchase_failed": "purchaseFailed",
        "purchase_succeeded": "purchaseSucceeded",
    });
});
/** @internal */
exports.ObjectResults$outboundSchema = z.object({
    creationFailed: z.number().int(),
    creationSucceeded: z.number().int(),
    purchaseFailed: z.number().int(),
    purchaseSucceeded: z.number().int(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        creationFailed: "creation_failed",
        creationSucceeded: "creation_succeeded",
        purchaseFailed: "purchase_failed",
        purchaseSucceeded: "purchase_succeeded",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var ObjectResults$;
(function (ObjectResults$) {
    /** @deprecated use `ObjectResults$inboundSchema` instead. */
    ObjectResults$.inboundSchema = exports.ObjectResults$inboundSchema;
    /** @deprecated use `ObjectResults$outboundSchema` instead. */
    ObjectResults$.outboundSchema = exports.ObjectResults$outboundSchema;
})(ObjectResults$ || (exports.ObjectResults$ = ObjectResults$ = {}));
function objectResultsToJSON(objectResults) {
    return JSON.stringify(exports.ObjectResults$outboundSchema.parse(objectResults));
}
exports.objectResultsToJSON = objectResultsToJSON;
function objectResultsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.ObjectResults$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'ObjectResults' from JSON`);
}
exports.objectResultsFromJSON = objectResultsFromJSON;
/** @internal */
exports.BatchStatus$inboundSchema = z
    .nativeEnum(exports.BatchStatus);
/** @internal */
exports.BatchStatus$outboundSchema = exports.BatchStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var BatchStatus$;
(function (BatchStatus$) {
    /** @deprecated use `BatchStatus$inboundSchema` instead. */
    BatchStatus$.inboundSchema = exports.BatchStatus$inboundSchema;
    /** @deprecated use `BatchStatus$outboundSchema` instead. */
    BatchStatus$.outboundSchema = exports.BatchStatus$outboundSchema;
})(BatchStatus$ || (exports.BatchStatus$ = BatchStatus$ = {}));
/** @internal */
exports.Batch$inboundSchema = z
    .object({
    default_carrier_account: z.string(),
    default_servicelevel_token: z.string(),
    label_filetype: labelfiletypeenum_js_1.LabelFileTypeEnum$inboundSchema.optional(),
    metadata: z.string().optional(),
    batch_shipments: batchshipmentpaginatedlist_js_1.BatchShipmentPaginatedList$inboundSchema,
    label_url: z.array(z.string()),
    object_created: z.string(),
    object_id: z.string(),
    object_owner: z.string(),
    object_results: z.lazy(() => exports.ObjectResults$inboundSchema),
    object_updated: z.string(),
    status: exports.BatchStatus$inboundSchema,
    test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "default_carrier_account": "defaultCarrierAccount",
        "default_servicelevel_token": "defaultServicelevelToken",
        "label_filetype": "labelFiletype",
        "batch_shipments": "batchShipments",
        "label_url": "labelUrl",
        "object_created": "objectCreated",
        "object_id": "objectId",
        "object_owner": "objectOwner",
        "object_results": "objectResults",
        "object_updated": "objectUpdated",
    });
});
/** @internal */
exports.Batch$outboundSchema = z.object({
    defaultCarrierAccount: z.string(),
    defaultServicelevelToken: z.string(),
    labelFiletype: labelfiletypeenum_js_1.LabelFileTypeEnum$outboundSchema.optional(),
    metadata: z.string().optional(),
    batchShipments: batchshipmentpaginatedlist_js_1.BatchShipmentPaginatedList$outboundSchema,
    labelUrl: z.array(z.string()),
    objectCreated: z.string(),
    objectId: z.string(),
    objectOwner: z.string(),
    objectResults: z.lazy(() => exports.ObjectResults$outboundSchema),
    objectUpdated: z.string(),
    status: exports.BatchStatus$outboundSchema,
    test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        defaultCarrierAccount: "default_carrier_account",
        defaultServicelevelToken: "default_servicelevel_token",
        labelFiletype: "label_filetype",
        batchShipments: "batch_shipments",
        labelUrl: "label_url",
        objectCreated: "object_created",
        objectId: "object_id",
        objectOwner: "object_owner",
        objectResults: "object_results",
        objectUpdated: "object_updated",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Batch$;
(function (Batch$) {
    /** @deprecated use `Batch$inboundSchema` instead. */
    Batch$.inboundSchema = exports.Batch$inboundSchema;
    /** @deprecated use `Batch$outboundSchema` instead. */
    Batch$.outboundSchema = exports.Batch$outboundSchema;
})(Batch$ || (exports.Batch$ = Batch$ = {}));
function batchToJSON(batch) {
    return JSON.stringify(exports.Batch$outboundSchema.parse(batch));
}
exports.batchToJSON = batchToJSON;
function batchFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Batch$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Batch' from JSON`);
}
exports.batchFromJSON = batchFromJSON;
//# sourceMappingURL=batch.js.map