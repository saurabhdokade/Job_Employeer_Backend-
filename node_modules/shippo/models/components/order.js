"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.orderFromJSON = exports.orderToJSON = exports.Order$ = exports.Order$outboundSchema = exports.Order$inboundSchema = exports.transactionsFromJSON = exports.transactionsToJSON = exports.Transactions$ = exports.Transactions$outboundSchema = exports.Transactions$inboundSchema = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const address_js_1 = require("./address.js");
const lineitem_js_1 = require("./lineitem.js");
const ordershopappenum_js_1 = require("./ordershopappenum.js");
const orderstatusenum_js_1 = require("./orderstatusenum.js");
const weightunitenum_js_1 = require("./weightunitenum.js");
/** @internal */
exports.Transactions$inboundSchema = z.object({});
/** @internal */
exports.Transactions$outboundSchema = z.object({});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Transactions$;
(function (Transactions$) {
    /** @deprecated use `Transactions$inboundSchema` instead. */
    Transactions$.inboundSchema = exports.Transactions$inboundSchema;
    /** @deprecated use `Transactions$outboundSchema` instead. */
    Transactions$.outboundSchema = exports.Transactions$outboundSchema;
})(Transactions$ || (exports.Transactions$ = Transactions$ = {}));
function transactionsToJSON(transactions) {
    return JSON.stringify(exports.Transactions$outboundSchema.parse(transactions));
}
exports.transactionsToJSON = transactionsToJSON;
function transactionsFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Transactions$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Transactions' from JSON`);
}
exports.transactionsFromJSON = transactionsFromJSON;
/** @internal */
exports.Order$inboundSchema = z
    .object({
    currency: z.string().optional(),
    notes: z.string().optional(),
    order_number: z.string().optional(),
    order_status: orderstatusenum_js_1.OrderStatusEnum$inboundSchema.optional(),
    placed_at: z.string(),
    shipping_cost: z.string().optional(),
    shipping_cost_currency: z.string().optional(),
    shipping_method: z.string().optional(),
    subtotal_price: z.string().optional(),
    total_price: z.string().optional(),
    total_tax: z.string().optional(),
    weight: z.string().optional(),
    weight_unit: weightunitenum_js_1.WeightUnitEnum$inboundSchema.optional(),
    from_address: address_js_1.Address$inboundSchema.optional(),
    to_address: address_js_1.Address$inboundSchema,
    line_items: z.array(lineitem_js_1.LineItem$inboundSchema).optional(),
    object_id: z.string().optional(),
    object_owner: z.string().optional(),
    shop_app: ordershopappenum_js_1.OrderShopAppEnum$inboundSchema.optional(),
    transactions: z.array(z.lazy(() => exports.Transactions$inboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "order_number": "orderNumber",
        "order_status": "orderStatus",
        "placed_at": "placedAt",
        "shipping_cost": "shippingCost",
        "shipping_cost_currency": "shippingCostCurrency",
        "shipping_method": "shippingMethod",
        "subtotal_price": "subtotalPrice",
        "total_price": "totalPrice",
        "total_tax": "totalTax",
        "weight_unit": "weightUnit",
        "from_address": "fromAddress",
        "to_address": "toAddress",
        "line_items": "lineItems",
        "object_id": "objectId",
        "object_owner": "objectOwner",
        "shop_app": "shopApp",
    });
});
/** @internal */
exports.Order$outboundSchema = z.object({
    currency: z.string().optional(),
    notes: z.string().optional(),
    orderNumber: z.string().optional(),
    orderStatus: orderstatusenum_js_1.OrderStatusEnum$outboundSchema.optional(),
    placedAt: z.string(),
    shippingCost: z.string().optional(),
    shippingCostCurrency: z.string().optional(),
    shippingMethod: z.string().optional(),
    subtotalPrice: z.string().optional(),
    totalPrice: z.string().optional(),
    totalTax: z.string().optional(),
    weight: z.string().optional(),
    weightUnit: weightunitenum_js_1.WeightUnitEnum$outboundSchema.optional(),
    fromAddress: address_js_1.Address$outboundSchema.optional(),
    toAddress: address_js_1.Address$outboundSchema,
    lineItems: z.array(lineitem_js_1.LineItem$outboundSchema).optional(),
    objectId: z.string().optional(),
    objectOwner: z.string().optional(),
    shopApp: ordershopappenum_js_1.OrderShopAppEnum$outboundSchema.optional(),
    transactions: z.array(z.lazy(() => exports.Transactions$outboundSchema)).optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        orderNumber: "order_number",
        orderStatus: "order_status",
        placedAt: "placed_at",
        shippingCost: "shipping_cost",
        shippingCostCurrency: "shipping_cost_currency",
        shippingMethod: "shipping_method",
        subtotalPrice: "subtotal_price",
        totalPrice: "total_price",
        totalTax: "total_tax",
        weightUnit: "weight_unit",
        fromAddress: "from_address",
        toAddress: "to_address",
        lineItems: "line_items",
        objectId: "object_id",
        objectOwner: "object_owner",
        shopApp: "shop_app",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Order$;
(function (Order$) {
    /** @deprecated use `Order$inboundSchema` instead. */
    Order$.inboundSchema = exports.Order$inboundSchema;
    /** @deprecated use `Order$outboundSchema` instead. */
    Order$.outboundSchema = exports.Order$outboundSchema;
})(Order$ || (exports.Order$ = Order$ = {}));
function orderToJSON(order) {
    return JSON.stringify(exports.Order$outboundSchema.parse(order));
}
exports.orderToJSON = orderToJSON;
function orderFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Order$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Order' from JSON`);
}
exports.orderFromJSON = orderFromJSON;
//# sourceMappingURL=order.js.map