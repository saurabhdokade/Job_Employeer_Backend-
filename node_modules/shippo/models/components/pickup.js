"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pickupFromJSON = exports.pickupToJSON = exports.Pickup$ = exports.Pickup$outboundSchema = exports.Pickup$inboundSchema = exports.PickupStatus$ = exports.PickupStatus$outboundSchema = exports.PickupStatus$inboundSchema = exports.PickupStatus = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const location_js_1 = require("./location.js");
/**
 * Indicates the status of the pickup.
 */
exports.PickupStatus = {
    Pending: "PENDING",
    Confirmed: "CONFIRMED",
    Error: "ERROR",
    Cancelled: "CANCELLED",
};
/** @internal */
exports.PickupStatus$inboundSchema = z.nativeEnum(exports.PickupStatus);
/** @internal */
exports.PickupStatus$outboundSchema = exports.PickupStatus$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var PickupStatus$;
(function (PickupStatus$) {
    /** @deprecated use `PickupStatus$inboundSchema` instead. */
    PickupStatus$.inboundSchema = exports.PickupStatus$inboundSchema;
    /** @deprecated use `PickupStatus$outboundSchema` instead. */
    PickupStatus$.outboundSchema = exports.PickupStatus$outboundSchema;
})(PickupStatus$ || (exports.PickupStatus$ = PickupStatus$ = {}));
/** @internal */
exports.Pickup$inboundSchema = z
    .object({
    carrier_account: z.string(),
    location: location_js_1.Location$inboundSchema,
    metadata: z.string().optional(),
    requested_end_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    requested_start_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
    transactions: z.array(z.string()),
    object_created: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    object_id: z.string().optional(),
    object_updated: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    confirmed_start_time: z.string().optional(),
    confirmed_end_time: z.string().optional(),
    cancel_by_time: z.string().optional(),
    status: exports.PickupStatus$inboundSchema.optional(),
    confirmation_code: z.string().optional(),
    timezone: z.string().optional(),
    messages: z.array(z.string()).optional(),
    is_test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "carrier_account": "carrierAccount",
        "requested_end_time": "requestedEndTime",
        "requested_start_time": "requestedStartTime",
        "object_created": "objectCreated",
        "object_id": "objectId",
        "object_updated": "objectUpdated",
        "confirmed_start_time": "confirmedStartTime",
        "confirmed_end_time": "confirmedEndTime",
        "cancel_by_time": "cancelByTime",
        "confirmation_code": "confirmationCode",
        "is_test": "isTest",
    });
});
/** @internal */
exports.Pickup$outboundSchema = z.object({
    carrierAccount: z.string(),
    location: location_js_1.Location$outboundSchema,
    metadata: z.string().optional(),
    requestedEndTime: z.date().transform(v => v.toISOString()),
    requestedStartTime: z.date().transform(v => v.toISOString()),
    transactions: z.array(z.string()),
    objectCreated: z.date().transform(v => v.toISOString()).optional(),
    objectId: z.string().optional(),
    objectUpdated: z.date().transform(v => v.toISOString()).optional(),
    confirmedStartTime: z.string().optional(),
    confirmedEndTime: z.string().optional(),
    cancelByTime: z.string().optional(),
    status: exports.PickupStatus$outboundSchema.optional(),
    confirmationCode: z.string().optional(),
    timezone: z.string().optional(),
    messages: z.array(z.string()).optional(),
    isTest: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        carrierAccount: "carrier_account",
        requestedEndTime: "requested_end_time",
        requestedStartTime: "requested_start_time",
        objectCreated: "object_created",
        objectId: "object_id",
        objectUpdated: "object_updated",
        confirmedStartTime: "confirmed_start_time",
        confirmedEndTime: "confirmed_end_time",
        cancelByTime: "cancel_by_time",
        confirmationCode: "confirmation_code",
        isTest: "is_test",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var Pickup$;
(function (Pickup$) {
    /** @deprecated use `Pickup$inboundSchema` instead. */
    Pickup$.inboundSchema = exports.Pickup$inboundSchema;
    /** @deprecated use `Pickup$outboundSchema` instead. */
    Pickup$.outboundSchema = exports.Pickup$outboundSchema;
})(Pickup$ || (exports.Pickup$ = Pickup$ = {}));
function pickupToJSON(pickup) {
    return JSON.stringify(exports.Pickup$outboundSchema.parse(pickup));
}
exports.pickupToJSON = pickupToJSON;
function pickupFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.Pickup$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'Pickup' from JSON`);
}
exports.pickupFromJSON = pickupFromJSON;
//# sourceMappingURL=pickup.js.map