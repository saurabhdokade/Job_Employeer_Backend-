import * as z from "zod";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
/**
 * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
 */
export declare const Provider: {
    readonly Fedex: "FEDEX";
    readonly Ups: "UPS";
    readonly Ontrac: "ONTRAC";
};
/**
 * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
 */
export type Provider = ClosedEnum<typeof Provider>;
/**
 * To add 3rd party insurance powered by <a href="https://docs.goshippo.com/docs/shipments/shippinginsurance/">XCover</a>,
 *
 * @remarks
 * specify <br> `amount`, `content`, and `currency`. <br> Alternatively, you can choose carrier provided insurance
 * by additionally specifying `provider` (UPS, FedEx and OnTrac only). <br><br> If you do not want to add insurance
 * to your shipment, do not set these parameters.
 */
export type Insurance = {
    /**
     * Declared value of the goods you want to insure.
     */
    amount?: string | undefined;
    /**
     * Description of package content.
     */
    content?: string | undefined;
    /**
     * Currency for the amount value.
     *
     * @remarks
     * Currently only USD is supported for FedEx and UPS.
     */
    currency?: string | undefined;
    /**
     * To have insurance cover provided by a carrier directly instead of Shippo's provider (XCover), set `provider` to `FEDEX`, `UPS`, or `ONTRAC`.
     */
    provider?: Provider | undefined;
};
/** @internal */
export declare const Provider$inboundSchema: z.ZodNativeEnum<typeof Provider>;
/** @internal */
export declare const Provider$outboundSchema: z.ZodNativeEnum<typeof Provider>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Provider$ {
    /** @deprecated use `Provider$inboundSchema` instead. */
    const inboundSchema: z.ZodNativeEnum<{
        readonly Fedex: "FEDEX";
        readonly Ups: "UPS";
        readonly Ontrac: "ONTRAC";
    }>;
    /** @deprecated use `Provider$outboundSchema` instead. */
    const outboundSchema: z.ZodNativeEnum<{
        readonly Fedex: "FEDEX";
        readonly Ups: "UPS";
        readonly Ontrac: "ONTRAC";
    }>;
}
/** @internal */
export declare const Insurance$inboundSchema: z.ZodType<Insurance, z.ZodTypeDef, unknown>;
/** @internal */
export type Insurance$Outbound = {
    amount?: string | undefined;
    content?: string | undefined;
    currency?: string | undefined;
    provider?: string | undefined;
};
/** @internal */
export declare const Insurance$outboundSchema: z.ZodType<Insurance$Outbound, z.ZodTypeDef, Insurance>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace Insurance$ {
    /** @deprecated use `Insurance$inboundSchema` instead. */
    const inboundSchema: z.ZodType<Insurance, z.ZodTypeDef, unknown>;
    /** @deprecated use `Insurance$outboundSchema` instead. */
    const outboundSchema: z.ZodType<Insurance$Outbound, z.ZodTypeDef, Insurance>;
    /** @deprecated use `Insurance$Outbound` instead. */
    type Outbound = Insurance$Outbound;
}
export declare function insuranceToJSON(insurance: Insurance): string;
export declare function insuranceFromJSON(jsonString: string): SafeParseResult<Insurance, SDKValidationError>;
//# sourceMappingURL=insurance.d.ts.map