import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { UserParcelTemplate, UserParcelTemplate$Outbound } from "./userparceltemplate.js";
export type UserParcelTemplateList = {
    results?: Array<UserParcelTemplate> | undefined;
};
/** @internal */
export declare const UserParcelTemplateList$inboundSchema: z.ZodType<UserParcelTemplateList, z.ZodTypeDef, unknown>;
/** @internal */
export type UserParcelTemplateList$Outbound = {
    results?: Array<UserParcelTemplate$Outbound> | undefined;
};
/** @internal */
export declare const UserParcelTemplateList$outboundSchema: z.ZodType<UserParcelTemplateList$Outbound, z.ZodTypeDef, UserParcelTemplateList>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace UserParcelTemplateList$ {
    /** @deprecated use `UserParcelTemplateList$inboundSchema` instead. */
    const inboundSchema: z.ZodType<UserParcelTemplateList, z.ZodTypeDef, unknown>;
    /** @deprecated use `UserParcelTemplateList$outboundSchema` instead. */
    const outboundSchema: z.ZodType<UserParcelTemplateList$Outbound, z.ZodTypeDef, UserParcelTemplateList>;
    /** @deprecated use `UserParcelTemplateList$Outbound` instead. */
    type Outbound = UserParcelTemplateList$Outbound;
}
export declare function userParcelTemplateListToJSON(userParcelTemplateList: UserParcelTemplateList): string;
export declare function userParcelTemplateListFromJSON(jsonString: string): SafeParseResult<UserParcelTemplateList, SDKValidationError>;
//# sourceMappingURL=userparceltemplatelist.d.ts.map