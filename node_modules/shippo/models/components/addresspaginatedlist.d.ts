import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Address, Address$Outbound } from "./address.js";
export type AddressPaginatedList = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Address> | undefined;
};
/** @internal */
export declare const AddressPaginatedList$inboundSchema: z.ZodType<AddressPaginatedList, z.ZodTypeDef, unknown>;
/** @internal */
export type AddressPaginatedList$Outbound = {
    next?: string | undefined;
    previous?: string | undefined;
    results?: Array<Address$Outbound> | undefined;
};
/** @internal */
export declare const AddressPaginatedList$outboundSchema: z.ZodType<AddressPaginatedList$Outbound, z.ZodTypeDef, AddressPaginatedList>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace AddressPaginatedList$ {
    /** @deprecated use `AddressPaginatedList$inboundSchema` instead. */
    const inboundSchema: z.ZodType<AddressPaginatedList, z.ZodTypeDef, unknown>;
    /** @deprecated use `AddressPaginatedList$outboundSchema` instead. */
    const outboundSchema: z.ZodType<AddressPaginatedList$Outbound, z.ZodTypeDef, AddressPaginatedList>;
    /** @deprecated use `AddressPaginatedList$Outbound` instead. */
    type Outbound = AddressPaginatedList$Outbound;
}
export declare function addressPaginatedListToJSON(addressPaginatedList: AddressPaginatedList): string;
export declare function addressPaginatedListFromJSON(jsonString: string): SafeParseResult<AddressPaginatedList, SDKValidationError>;
//# sourceMappingURL=addresspaginatedlist.d.ts.map