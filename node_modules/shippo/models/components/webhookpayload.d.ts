import * as z from "zod";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { WebhookPayloadBatch, WebhookPayloadBatch$Outbound } from "./webhookpayloadbatch.js";
import { WebhookPayloadTrack, WebhookPayloadTrack$Outbound } from "./webhookpayloadtrack.js";
import { WebhookPayloadTransaction, WebhookPayloadTransaction$Outbound } from "./webhookpayloadtransaction.js";
export type WebhookPayload = (WebhookPayloadTrack & {
    event: "track_updated";
}) | (WebhookPayloadBatch & {
    event: "batch_created";
}) | (WebhookPayloadBatch & {
    event: "batch_purchased";
}) | (WebhookPayloadTransaction & {
    event: "transaction_created";
}) | (WebhookPayloadTransaction & {
    event: "transaction_updated";
});
/** @internal */
export declare const WebhookPayload$inboundSchema: z.ZodType<WebhookPayload, z.ZodTypeDef, unknown>;
/** @internal */
export type WebhookPayload$Outbound = (WebhookPayloadTrack$Outbound & {
    event: "track_updated";
}) | (WebhookPayloadBatch$Outbound & {
    event: "batch_created";
}) | (WebhookPayloadBatch$Outbound & {
    event: "batch_purchased";
}) | (WebhookPayloadTransaction$Outbound & {
    event: "transaction_created";
}) | (WebhookPayloadTransaction$Outbound & {
    event: "transaction_updated";
});
/** @internal */
export declare const WebhookPayload$outboundSchema: z.ZodType<WebhookPayload$Outbound, z.ZodTypeDef, WebhookPayload>;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export declare namespace WebhookPayload$ {
    /** @deprecated use `WebhookPayload$inboundSchema` instead. */
    const inboundSchema: z.ZodType<WebhookPayload, z.ZodTypeDef, unknown>;
    /** @deprecated use `WebhookPayload$outboundSchema` instead. */
    const outboundSchema: z.ZodType<WebhookPayload$Outbound, z.ZodTypeDef, WebhookPayload>;
    /** @deprecated use `WebhookPayload$Outbound` instead. */
    type Outbound = WebhookPayload$Outbound;
}
export declare function webhookPayloadToJSON(webhookPayload: WebhookPayload): string;
export declare function webhookPayloadFromJSON(jsonString: string): SafeParseResult<WebhookPayload, SDKValidationError>;
//# sourceMappingURL=webhookpayload.d.ts.map