"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.customsDeclarationFromJSON = exports.customsDeclarationToJSON = exports.CustomsDeclaration$ = exports.CustomsDeclaration$outboundSchema = exports.CustomsDeclaration$inboundSchema = exports.customsDeclarationDutiesPayorFromJSON = exports.customsDeclarationDutiesPayorToJSON = exports.CustomsDeclarationDutiesPayor$ = exports.CustomsDeclarationDutiesPayor$outboundSchema = exports.CustomsDeclarationDutiesPayor$inboundSchema = exports.customsDeclarationAddressFromJSON = exports.customsDeclarationAddressToJSON = exports.CustomsDeclarationAddress$ = exports.CustomsDeclarationAddress$outboundSchema = exports.CustomsDeclarationAddress$inboundSchema = exports.CustomsDeclarationType$ = exports.CustomsDeclarationType$outboundSchema = exports.CustomsDeclarationType$inboundSchema = exports.CustomsDeclarationType = void 0;
const z = __importStar(require("zod"));
const primitives_js_1 = require("../../lib/primitives.js");
const schemas_js_1 = require("../../lib/schemas.js");
const customsexporteridentification_js_1 = require("./customsexporteridentification.js");
const customsinvoicedcharges_js_1 = require("./customsinvoicedcharges.js");
const objectstateenum_js_1 = require("./objectstateenum.js");
/**
 * Party to be billed for duties.
 */
exports.CustomsDeclarationType = {
    Sender: "SENDER",
    Recipient: "RECIPIENT",
    ThirdParty: "THIRD_PARTY",
};
/** @internal */
exports.CustomsDeclarationType$inboundSchema = z.nativeEnum(exports.CustomsDeclarationType);
/** @internal */
exports.CustomsDeclarationType$outboundSchema = exports.CustomsDeclarationType$inboundSchema;
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsDeclarationType$;
(function (CustomsDeclarationType$) {
    /** @deprecated use `CustomsDeclarationType$inboundSchema` instead. */
    CustomsDeclarationType$.inboundSchema = exports.CustomsDeclarationType$inboundSchema;
    /** @deprecated use `CustomsDeclarationType$outboundSchema` instead. */
    CustomsDeclarationType$.outboundSchema = exports.CustomsDeclarationType$outboundSchema;
})(CustomsDeclarationType$ || (exports.CustomsDeclarationType$ = CustomsDeclarationType$ = {}));
/** @internal */
exports.CustomsDeclarationAddress$inboundSchema = z.object({
    name: z.string().optional(),
    zip: z.string().optional(),
    country: z.string().optional(),
});
/** @internal */
exports.CustomsDeclarationAddress$outboundSchema = z.object({
    name: z.string().optional(),
    zip: z.string().optional(),
    country: z.string().optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsDeclarationAddress$;
(function (CustomsDeclarationAddress$) {
    /** @deprecated use `CustomsDeclarationAddress$inboundSchema` instead. */
    CustomsDeclarationAddress$.inboundSchema = exports.CustomsDeclarationAddress$inboundSchema;
    /** @deprecated use `CustomsDeclarationAddress$outboundSchema` instead. */
    CustomsDeclarationAddress$.outboundSchema = exports.CustomsDeclarationAddress$outboundSchema;
})(CustomsDeclarationAddress$ || (exports.CustomsDeclarationAddress$ = CustomsDeclarationAddress$ = {}));
function customsDeclarationAddressToJSON(customsDeclarationAddress) {
    return JSON.stringify(exports.CustomsDeclarationAddress$outboundSchema.parse(customsDeclarationAddress));
}
exports.customsDeclarationAddressToJSON = customsDeclarationAddressToJSON;
function customsDeclarationAddressFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomsDeclarationAddress$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomsDeclarationAddress' from JSON`);
}
exports.customsDeclarationAddressFromJSON = customsDeclarationAddressFromJSON;
/** @internal */
exports.CustomsDeclarationDutiesPayor$inboundSchema = z.object({
    account: z.string().optional(),
    type: exports.CustomsDeclarationType$inboundSchema.optional(),
    address: z.lazy(() => exports.CustomsDeclarationAddress$inboundSchema).optional(),
});
/** @internal */
exports.CustomsDeclarationDutiesPayor$outboundSchema = z.object({
    account: z.string().optional(),
    type: exports.CustomsDeclarationType$outboundSchema.optional(),
    address: z.lazy(() => exports.CustomsDeclarationAddress$outboundSchema).optional(),
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsDeclarationDutiesPayor$;
(function (CustomsDeclarationDutiesPayor$) {
    /** @deprecated use `CustomsDeclarationDutiesPayor$inboundSchema` instead. */
    CustomsDeclarationDutiesPayor$.inboundSchema = exports.CustomsDeclarationDutiesPayor$inboundSchema;
    /** @deprecated use `CustomsDeclarationDutiesPayor$outboundSchema` instead. */
    CustomsDeclarationDutiesPayor$.outboundSchema = exports.CustomsDeclarationDutiesPayor$outboundSchema;
})(CustomsDeclarationDutiesPayor$ || (exports.CustomsDeclarationDutiesPayor$ = CustomsDeclarationDutiesPayor$ = {}));
function customsDeclarationDutiesPayorToJSON(customsDeclarationDutiesPayor) {
    return JSON.stringify(exports.CustomsDeclarationDutiesPayor$outboundSchema.parse(customsDeclarationDutiesPayor));
}
exports.customsDeclarationDutiesPayorToJSON = customsDeclarationDutiesPayorToJSON;
function customsDeclarationDutiesPayorFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomsDeclarationDutiesPayor$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomsDeclarationDutiesPayor' from JSON`);
}
exports.customsDeclarationDutiesPayorFromJSON = customsDeclarationDutiesPayorFromJSON;
/** @internal */
exports.CustomsDeclaration$inboundSchema = z.object({
    aes_itn: z.string().optional(),
    b13a_filing_option: z.string().optional(),
    b13a_number: z.string().optional(),
    certificate: z.string().optional(),
    certify: z.boolean(),
    certify_signer: z.string(),
    commercial_invoice: z.boolean().optional(),
    contents_explanation: z.string().optional(),
    disclaimer: z.string().optional(),
    duties_payor: z.lazy(() => exports.CustomsDeclarationDutiesPayor$inboundSchema)
        .optional(),
    exporter_identification: customsexporteridentification_js_1.CustomsExporterIdentification$inboundSchema
        .optional(),
    exporter_reference: z.string().optional(),
    importer_reference: z.string().optional(),
    is_vat_collected: z.boolean().optional(),
    invoice: z.string().optional(),
    license: z.string().optional(),
    metadata: z.string().optional(),
    notes: z.string().optional(),
    address_importer: z.string().optional(),
    contents_type: z.string(),
    eel_pfc: z.string().optional(),
    incoterm: z.string().optional(),
    invoiced_charges: customsinvoicedcharges_js_1.CustomsInvoicedCharges$inboundSchema.optional(),
    items: z.array(z.string()),
    non_delivery_option: z.string(),
    object_created: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    object_id: z.string().optional(),
    object_owner: z.string().optional(),
    object_state: objectstateenum_js_1.ObjectStateEnum$inboundSchema.optional(),
    object_updated: z.string().datetime({ offset: true }).transform(v => new Date(v)).optional(),
    test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        "aes_itn": "aesItn",
        "b13a_filing_option": "b13aFilingOption",
        "b13a_number": "b13aNumber",
        "certify_signer": "certifySigner",
        "commercial_invoice": "commercialInvoice",
        "contents_explanation": "contentsExplanation",
        "duties_payor": "dutiesPayor",
        "exporter_identification": "exporterIdentification",
        "exporter_reference": "exporterReference",
        "importer_reference": "importerReference",
        "is_vat_collected": "isVatCollected",
        "address_importer": "addressImporter",
        "contents_type": "contentsType",
        "eel_pfc": "eelPfc",
        "invoiced_charges": "invoicedCharges",
        "non_delivery_option": "nonDeliveryOption",
        "object_created": "objectCreated",
        "object_id": "objectId",
        "object_owner": "objectOwner",
        "object_state": "objectState",
        "object_updated": "objectUpdated",
    });
});
/** @internal */
exports.CustomsDeclaration$outboundSchema = z.object({
    aesItn: z.string().optional(),
    b13aFilingOption: z.string().optional(),
    b13aNumber: z.string().optional(),
    certificate: z.string().optional(),
    certify: z.boolean(),
    certifySigner: z.string(),
    commercialInvoice: z.boolean().optional(),
    contentsExplanation: z.string().optional(),
    disclaimer: z.string().optional(),
    dutiesPayor: z.lazy(() => exports.CustomsDeclarationDutiesPayor$outboundSchema)
        .optional(),
    exporterIdentification: customsexporteridentification_js_1.CustomsExporterIdentification$outboundSchema
        .optional(),
    exporterReference: z.string().optional(),
    importerReference: z.string().optional(),
    isVatCollected: z.boolean().optional(),
    invoice: z.string().optional(),
    license: z.string().optional(),
    metadata: z.string().optional(),
    notes: z.string().optional(),
    addressImporter: z.string().optional(),
    contentsType: z.string(),
    eelPfc: z.string().optional(),
    incoterm: z.string().optional(),
    invoicedCharges: customsinvoicedcharges_js_1.CustomsInvoicedCharges$outboundSchema.optional(),
    items: z.array(z.string()),
    nonDeliveryOption: z.string(),
    objectCreated: z.date().transform(v => v.toISOString()).optional(),
    objectId: z.string().optional(),
    objectOwner: z.string().optional(),
    objectState: objectstateenum_js_1.ObjectStateEnum$outboundSchema.optional(),
    objectUpdated: z.date().transform(v => v.toISOString()).optional(),
    test: z.boolean().optional(),
}).transform((v) => {
    return (0, primitives_js_1.remap)(v, {
        aesItn: "aes_itn",
        b13aFilingOption: "b13a_filing_option",
        b13aNumber: "b13a_number",
        certifySigner: "certify_signer",
        commercialInvoice: "commercial_invoice",
        contentsExplanation: "contents_explanation",
        dutiesPayor: "duties_payor",
        exporterIdentification: "exporter_identification",
        exporterReference: "exporter_reference",
        importerReference: "importer_reference",
        isVatCollected: "is_vat_collected",
        addressImporter: "address_importer",
        contentsType: "contents_type",
        eelPfc: "eel_pfc",
        invoicedCharges: "invoiced_charges",
        nonDeliveryOption: "non_delivery_option",
        objectCreated: "object_created",
        objectId: "object_id",
        objectOwner: "object_owner",
        objectState: "object_state",
        objectUpdated: "object_updated",
    });
});
/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
var CustomsDeclaration$;
(function (CustomsDeclaration$) {
    /** @deprecated use `CustomsDeclaration$inboundSchema` instead. */
    CustomsDeclaration$.inboundSchema = exports.CustomsDeclaration$inboundSchema;
    /** @deprecated use `CustomsDeclaration$outboundSchema` instead. */
    CustomsDeclaration$.outboundSchema = exports.CustomsDeclaration$outboundSchema;
})(CustomsDeclaration$ || (exports.CustomsDeclaration$ = CustomsDeclaration$ = {}));
function customsDeclarationToJSON(customsDeclaration) {
    return JSON.stringify(exports.CustomsDeclaration$outboundSchema.parse(customsDeclaration));
}
exports.customsDeclarationToJSON = customsDeclarationToJSON;
function customsDeclarationFromJSON(jsonString) {
    return (0, schemas_js_1.safeParse)(jsonString, (x) => exports.CustomsDeclaration$inboundSchema.parse(JSON.parse(x)), `Failed to parse 'CustomsDeclaration' from JSON`);
}
exports.customsDeclarationFromJSON = customsDeclarationFromJSON;
//# sourceMappingURL=customsdeclaration.js.map