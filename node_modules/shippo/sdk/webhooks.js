"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Webhooks = void 0;
const webhooksCreateWebhook_js_1 = require("../funcs/webhooksCreateWebhook.js");
const webhooksDeleteWebhook_js_1 = require("../funcs/webhooksDeleteWebhook.js");
const webhooksGetWebhook_js_1 = require("../funcs/webhooksGetWebhook.js");
const webhooksListWebhooks_js_1 = require("../funcs/webhooksListWebhooks.js");
const webhooksUpdateWebhook_js_1 = require("../funcs/webhooksUpdateWebhook.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Webhooks extends sdks_js_1.ClientSDK {
    /**
     * Create a new webhook
     *
     * @remarks
     * Creates a new webhook to send notifications to a URL when a specific event occurs.
     */
    async createWebhook(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhooksCreateWebhook_js_1.webhooksCreateWebhook)(this, request, options));
    }
    /**
     * List all webhooks
     *
     * @remarks
     * Returns a list of all webhooks you have created.
     */
    async listWebhooks(options) {
        return (0, fp_js_1.unwrapAsync)((0, webhooksListWebhooks_js_1.webhooksListWebhooks)(this, options));
    }
    /**
     * Retrieve a specific webhook
     *
     * @remarks
     * Returns the details of a specific webhook using the webhook object ID.
     */
    async getWebhook(webhookId, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhooksGetWebhook_js_1.webhooksGetWebhook)(this, webhookId, options));
    }
    /**
     * Update an existing webhook
     *
     * @remarks
     * Updates an existing webhook using the webhook object ID.
     */
    async updateWebhook(webhookUpdateRequest, webhookId, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhooksUpdateWebhook_js_1.webhooksUpdateWebhook)(this, webhookUpdateRequest, webhookId, options));
    }
    /**
     * Delete a specific webhook
     *
     * @remarks
     * Deletes a specific webhook using the webhook object ID.
     */
    async deleteWebhook(webhookId, options) {
        return (0, fp_js_1.unwrapAsync)((0, webhooksDeleteWebhook_js_1.webhooksDeleteWebhook)(this, webhookId, options));
    }
}
exports.Webhooks = Webhooks;
//# sourceMappingURL=webhooks.js.map