"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserParcelTemplates = void 0;
const userParcelTemplatesCreate_js_1 = require("../funcs/userParcelTemplatesCreate.js");
const userParcelTemplatesDelete_js_1 = require("../funcs/userParcelTemplatesDelete.js");
const userParcelTemplatesGet_js_1 = require("../funcs/userParcelTemplatesGet.js");
const userParcelTemplatesList_js_1 = require("../funcs/userParcelTemplatesList.js");
const userParcelTemplatesUpdate_js_1 = require("../funcs/userParcelTemplatesUpdate.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class UserParcelTemplates extends sdks_js_1.ClientSDK {
    /**
     * List all user parcel templates
     *
     * @remarks
     * Returns a list all of all user parcel template objects.
     */
    async list(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, userParcelTemplatesList_js_1.userParcelTemplatesList)(this, request, options));
    }
    /**
     * Create a new user parcel template
     *
     * @remarks
     * Creates a new user parcel template. <br>You can choose to create a
     * parcel template using a preset carrier template as a starting point, or
     * you can create an entirely custom one. To use a preset carrier template,
     * pass in a unique template token from <a href="#tag/Parcel-Templates">this list</a>
     * plus the weight fields (**weight** and **weight_unit**). Otherwise, omit
     * the template field and pass the other fields, for the weight, length, height,
     * and depth, as well as their units."
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, userParcelTemplatesCreate_js_1.userParcelTemplatesCreate)(this, request, options));
    }
    /**
     * Delete a user parcel template
     *
     * @remarks
     * Deletes a user parcel template using an object ID.
     */
    async delete(userParcelTemplateObjectId, options) {
        return (0, fp_js_1.unwrapAsync)((0, userParcelTemplatesDelete_js_1.userParcelTemplatesDelete)(this, userParcelTemplateObjectId, options));
    }
    /**
     * Retrieves a user parcel template
     *
     * @remarks
     * Returns the parcel template information for a specific user parcel
     * template, identified by the object ID.
     */
    async get(userParcelTemplateObjectId, options) {
        return (0, fp_js_1.unwrapAsync)((0, userParcelTemplatesGet_js_1.userParcelTemplatesGet)(this, userParcelTemplateObjectId, options));
    }
    /**
     * Update an existing user parcel template
     *
     * @remarks
     * Updates an existing user parcel template.
     */
    async update(userParcelTemplateObjectId, userParcelTemplateUpdateRequest, options) {
        return (0, fp_js_1.unwrapAsync)((0, userParcelTemplatesUpdate_js_1.userParcelTemplatesUpdate)(this, userParcelTemplateObjectId, userParcelTemplateUpdateRequest, options));
    }
}
exports.UserParcelTemplates = UserParcelTemplates;
//# sourceMappingURL=userparceltemplates.js.map