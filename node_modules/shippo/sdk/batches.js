"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Batches = void 0;
const batchesAddShipments_js_1 = require("../funcs/batchesAddShipments.js");
const batchesCreate_js_1 = require("../funcs/batchesCreate.js");
const batchesGet_js_1 = require("../funcs/batchesGet.js");
const batchesPurchase_js_1 = require("../funcs/batchesPurchase.js");
const batchesRemoveShipments_js_1 = require("../funcs/batchesRemoveShipments.js");
const sdks_js_1 = require("../lib/sdks.js");
const fp_js_1 = require("../types/fp.js");
class Batches extends sdks_js_1.ClientSDK {
    /**
     * Create a batch
     *
     * @remarks
     * Creates a new batch object for purchasing shipping labels for many shipments at once. Batches are created asynchronously. This means that the API response won't include your batch shipments yet. You need to retrieve the batch later to verify that all batch shipments are valid.
     */
    async create(request, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchesCreate_js_1.batchesCreate)(this, request, options));
    }
    /**
     * Retrieve a batch
     *
     * @remarks
     * Returns a batch using an object ID. <br> Batch shipments are displayed 100 at a time.  You can iterate
     * through each `page` using the `?page= query` parameter.  You can also filter based on batch shipment
     * status, for example, by passing a query param like `?object_results=creation_failed`. <br>
     * For more details on filtering results, see our guide on <a href="https://docs.goshippo.com/docs/api_concepts/filtering/" target="blank"> filtering</a>.
     */
    async get(batchId, page, results, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchesGet_js_1.batchesGet)(this, batchId, page, results, options));
    }
    /**
     * Add shipments to a batch
     *
     * @remarks
     * Adds batch shipments to an existing batch.
     */
    async addShipments(requestBody, batchId, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchesAddShipments_js_1.batchesAddShipments)(this, requestBody, batchId, options));
    }
    /**
     * Purchase a batch
     *
     * @remarks
     * Purchases an existing batch with a status of `VALID`.
     * Once you send a POST request to the purchase endpoint the batch status will change to `PURCHASING`.
     * When all the shipments are purchased, the status will change to `PURCHASED` and you will receive a
     * `batch_purchased` webhook indicating that the batch has been purchased
     */
    async purchase(batchId, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchesPurchase_js_1.batchesPurchase)(this, batchId, options));
    }
    /**
     * Remove shipments from a batch
     *
     * @remarks
     * Removes shipments from an existing batch shipment.
     */
    async removeShipments(requestBody, batchId, options) {
        return (0, fp_js_1.unwrapAsync)((0, batchesRemoveShipments_js_1.batchesRemoveShipments)(this, requestBody, batchId, options));
    }
}
exports.Batches = Batches;
//# sourceMappingURL=batches.js.map