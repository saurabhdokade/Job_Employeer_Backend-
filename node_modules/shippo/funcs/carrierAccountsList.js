"use strict";
/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.carrierAccountsList = void 0;
const encodings_js_1 = require("../lib/encodings.js");
const M = __importStar(require("../lib/matchers.js"));
const primitives_js_1 = require("../lib/primitives.js");
const schemas_js_1 = require("../lib/schemas.js");
const security_js_1 = require("../lib/security.js");
const url_js_1 = require("../lib/url.js");
const components = __importStar(require("../models/components/index.js"));
const operations = __importStar(require("../models/operations/index.js"));
/**
 * List all carrier accounts
 *
 * @remarks
 * Returns a list of all carrier accounts connected to your Shippo account. These carrier accounts include both Shippo carrier accounts and your own carrier accounts that you have connected to your Shippo account.
 *
 * Additionally, you can get information about the service levels associated with each carrier account by passing in the `?service_levels=true` query parameter. <br>
 * Using it appends the property `service_levels` to each carrier account. <br>
 * By default, if the query parameter is omitted, the `service_levels` property will not be included in the response.
 */
async function carrierAccountsList(client, request, options) {
    const parsed = (0, schemas_js_1.safeParse)(request, (value) => operations.ListCarrierAccountsRequest$outboundSchema.parse(value), "Input validation failed");
    if (!parsed.ok) {
        return parsed;
    }
    const payload = parsed.value;
    const body = null;
    const path = (0, url_js_1.pathToFunc)("/carrier_accounts")();
    const query = (0, encodings_js_1.encodeFormQuery)({
        "account_id": payload.account_id,
        "carrier": payload.carrier,
        "page": payload.page,
        "results": payload.results,
        "service_levels": payload.service_levels,
    });
    const headers = new Headers((0, primitives_js_1.compactMap)({
        Accept: "application/json",
        "SHIPPO-API-VERSION": (0, encodings_js_1.encodeSimple)("SHIPPO-API-VERSION", client._options.shippoApiVersion, { explode: false, charEncoding: "none" }),
    }));
    const secConfig = await (0, security_js_1.extractSecurity)(client._options.apiKeyHeader);
    const securityInput = secConfig == null ? {} : { apiKeyHeader: secConfig };
    const requestSecurity = (0, security_js_1.resolveGlobalSecurity)(securityInput);
    const context = {
        operationID: "ListCarrierAccounts",
        oAuth2Scopes: [],
        resolvedSecurity: requestSecurity,
        securitySource: client._options.apiKeyHeader,
        retryConfig: options?.retries
            || client._options.retryConfig
            || { strategy: "none" },
        retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
    };
    const requestRes = client._createRequest(context, {
        security: requestSecurity,
        method: "GET",
        baseURL: options?.serverURL,
        path: path,
        headers: headers,
        query: query,
        body: body,
        timeoutMs: options?.timeoutMs || client._options.timeoutMs || -1,
    }, options);
    if (!requestRes.ok) {
        return requestRes;
    }
    const req = requestRes.value;
    const doResult = await client._do(req, {
        context,
        errorCodes: ["400", "4XX", "5XX"],
        retryConfig: context.retryConfig,
        retryCodes: context.retryCodes,
    });
    if (!doResult.ok) {
        return doResult;
    }
    const response = doResult.value;
    const [result] = await M.match(M.json(200, components.CarrierAccountPaginatedList$inboundSchema), M.fail([400, "4XX"]), M.fail("5XX"))(response);
    if (!result.ok) {
        return result;
    }
    return result;
}
exports.carrierAccountsList = carrierAccountsList;
//# sourceMappingURL=carrierAccountsList.js.map